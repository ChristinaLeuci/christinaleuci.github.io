<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical | Christina Leuci]]></title>
  <link href="http://ChristinaLeuci.github.io/blog/categories/technical/atom.xml" rel="self"/>
  <link href="http://ChristinaLeuci.github.io/"/>
  <updated>2015-12-04T09:53:13-05:00</updated>
  <id>http://ChristinaLeuci.github.io/</id>
  <author>
    <name><![CDATA[Christina Leuci]]></name>
    <email><![CDATA[christinaleuci@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimizing a Manual String Reversal]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/12/02/optimizing-a-manual-string-reversal/"/>
    <updated>2015-12-02T08:27:43-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/12/02/optimizing-a-manual-string-reversal</id>
    <content type="html"><![CDATA[<p>Sometimes it&rsquo;s nice to figure out what the logic is behind Ruby&rsquo;s object classes.</p>

<!--more-->


<p>Last night I was working on a <code>string_reversal</code> method which as the name says is meant to return a reversed string. As always start by writing things out, how would I do this? Obvious first step create a suitably named method and take in an argument (optional), then retrieve the last element of the string and place it at the front until the entire string is reversed. Simple in writing but so many choices in how to code it!</p>

<p>Let me post my original code, don&rsquo;t laugh it gets better I promise.</p>

<p><figure class='code'><figcaption><span>[original.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">reverse_string</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">arg</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>      <span class="n">chars</span> <span class="o">=</span> <span class="n">arg</span><span class="o">.</span><span class="n">chars</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">chars</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>        <span class="n">new_str</span> <span class="o">+=</span> <span class="n">chars</span><span class="o">[</span><span class="n">chars</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">new_str</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Send</span> <span class="n">a</span> <span class="n">string</span> <span class="k">next</span> <span class="n">time!</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let me explain this method, it takes in an argument and proceeds to check if the argument is a string before it proceeds. If it is a string then three new variables are initialized in the scope of the method, <code>new_str</code>, <code>chars</code>, and <code>i</code>. <code>new_str</code> will be used to hold the reversed string, <code>chars</code> is the return value of Ruby String method chars() that creates an array of characters from the string, [&ldquo;h&rdquo;,&ldquo;e&rdquo;,&ldquo;l&rdquo;,&ldquo;l&rdquo;,&ldquo;o&rdquo;], and lastly <code>i</code> is a counting variable. My first thought was to grab elements from the end of the array to the beginning, <code>chars.length - 1</code> would give me &ldquo;o&rdquo; so <code>i</code> was set to 1. I concatenated each element of the array, from the last element to the first, to the <code>new_str</code> variable. Afterwards, I incremented the <code>i</code> varibale by 1 and outside of the while loop I returned the new_str.</p>

<p>Using my previous example of &ldquo;hello&rdquo;, if this string were to be sent to this method then we would receive &ldquo;olleh&rdquo;. Now, from just looking at the method you would assume that this is working to the best of it&rsquo;s abilities but there is one big flaw, the time. The way this method is written there are three logic points, &ldquo;is it a String?&rdquo;, calling upon chars to receive an array of characters, and comparing each element of the character array. Right now this method has a Big O Notation value of &lsquo;n&rsquo; as it needs to traverse each element of the array.</p>

<p>The first alternate way to reverse a string can be seen in the following <code>first_alternate_reverse</code> method. Similarly to my previous <code>reverse_string</code> method this will receive a string as an argument and create an array of characters from the string. Then by using the Array pop() method we remove the last element from chars(self) and return it. This is runs as many times as the length of the character array.</p>

<p><figure class='code'><figcaption><span>[first_method.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">first_alternate_reverse</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">word</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">each_char</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>    <span class="n">chars</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="n">word</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">chars</span><span class="o">.</span><span class="n">pop</span><span class="p">}</span>
</span><span class='line'>    <span class="n">word</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Like the original reversal method this first alternative method has a Big O Notation of &lsquo;n&rsquo;, the method must go through each element to of the array. We can optimize this logic further by bringing the Big O Notation down to &lsquo;n/2&rsquo;.</p>

<p>The second alternate way to reverse a string can be seen in the following <code>second_alternate_reverse</code> method. From first glance this method seems different from the first two as it doesn&rsquo;t have an argument but it&rsquo;s quite similar. What is happening here is we are creating a reverse method that can be called on a string, exactly like the <code>reverse()</code> method Ruby has already defined.</p>

<p>Let me walk you through this code. The <code>second_alternate_reverse</code> method is taking in the variable x in <code>test.rb</code> and this becomes &lsquo;self&rsquo;. At the beginning of the method self = &ldquo;hello&rdquo; and half_self = 2. Keep in mind <code>5/2 != 2.5</code>, Ruby rounds when it&rsquo;s dealing with integers (if you did want a float then you would need to make the &lsquo;2&rsquo; into a &lsquo;2.0&rsquo;).</p>

<p>Looking at the next line you can see the code inside the curly brackets is only being run as many times as half_self is equal to, in this case it&rsquo;s &ldquo;2&rdquo;. Inside the curly brackets we are swapping mirrored characters in the string such as &ldquo;h&rdquo; and &ldquo;o&rdquo; or &ldquo;e&rdquo; and &ldquo;l&rdquo; until we reach the center of the string.</p>

<p><figure class='code'><figcaption><span>[test.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">second_alternate_reverse</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>[second_method.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">second_alternate_reverse</span>
</span><span class='line'>      <span class="n">half_self</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">half_self</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">self</span><span class="o">[</span><span class="n">x</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">[-</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[-</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If you wanted a permanent solution like reverse!() you could add an exclamation mark after the method name as such &ldquo;second_alternate_reverse!&rdquo;</p>

<p>I hope you&rsquo;ve found this informative and useful in your programming endeavors!</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to RSpec]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/11/06/an-introduction-to-rspec/"/>
    <updated>2015-11-06T14:51:36-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/11/06/an-introduction-to-rspec</id>
    <content type="html"><![CDATA[<p>Learn how to setup RSpec and how to write the best tests.</p>

<!--more-->


<p>RSpec is a testing framework used solely for Ruby and Ruby on Rails. The &ldquo;R&rdquo; stands for Ruby and the &ldquo;Spec&rdquo; stands for specifications, which basically means does this Ruby code exhibit the expected behavior in a controlled context. You can use RSpec testing on any script difficulty, from printing a string to the terminal to financial web applications. Generally, tests are used on more complex logic but let&rsquo;s go over that later. <strong>First, what is a test?</strong></p>

<p>Let&rsquo;s say, you create a tic tac toe game and want to see how your position will change if you select a certain slot. This is testing. Testing is also when you submit a form on your web application using a hundred character email address knowing full well that you&rsquo;ve set the email character limit to 25.</p>

<p>The difference between those tests and RSpec is that those tests are manual, RSpec is automatic. For simpler scripts you may be fine doing manual testing but for those complex web applications automatic testing is vital. Without testing you would need to go through each manual test every single time you make a small change anywhere to ensure your application didn&rsquo;t fall apart. That&rsquo;s a ton of wasted time right there.</p>

<h2>Need to Knows</h2>

<p>First thing to know about RSpec is that it tests in three steps: &ldquo;given&rdquo;, &ldquo;when&rdquo;, and &ldquo;then&rdquo;. Let&rsquo;s say we&rsquo;re testing the following <code>print_string</code> method.</p>

<p>  <figure class='code'><figcaption><span>[print.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>    <span class="k">def</span> <span class="nf">print_string</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Hello</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">arg</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<p>  <blockquote><p>Given that the <code>print_string(arg)</code> method is run&hellip;<br/>  When arg is equal to &ldquo;World&rdquo;&hellip;<br/>  Then we should expect &ldquo;Hello World&rdquo; to be returned</p></blockquote></p>

<p><figure class='code'><figcaption><span>[print_spec.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">describe</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#print_string&amp;rsquo; do</span>
</span><span class='line'>    <span class="n">it</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">returns</span> <span class="no">Hello</span> <span class="no">World</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">print_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">World</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Hello</span> <span class="no">World</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The second fact to know about RSpec is that it is a Domain-Specific-Language. This means that although RSpec is Ruby it may not be exactly like the Ruby used in your Controllers or Models. Read more about DSL&rsquo;s <a target="_blank" href="https://en.wikipedia.org/wiki/Domain-specific_language">here</a>!</p>

<h2>Why Should You Test?</h2>

<p>Before I tell you why testing is important I&rsquo;ll disclose a reason not to test. Testing, if done extensively, can take up a lot of time and as the age old saying is &ldquo;time is money&rdquo;. So, if you need to desperately get that initial application out the door then you may choose to forego testing temporarily. But remember, do it soon or it will bite you in the ass!</p>

<h3>Now, why you should actually test</h3>

<p>  &#9675; Testing finds bugs</p>

<p>  &#9675; Makes you actually think about your code</p>

<p>  &#9675; Covers edge cases (like that hundred char email form submission)</p>

<p>  &#9675; Exposes crappy code</p>

<p>  &#9675; Makes refactoring and improving code loads easier</p>

<p>  &#9675; Saves development time (oh a bug? write a test for it! &hellip; Boom, time and money well saved!)</p>

<h2>Not All Tests Are Created Equal</h2>

<p>  <blockquote><p>“If you don’t care about quality, you can meet any other requirement”</p><footer><strong>Gerald M. Weinberg</strong></footer></blockquote></p>

<p>  Yes, your whole code needs to work but some tests are more important than others.</p>

<p>  &#9675; Really complex logic is SUPER IMPORTANT! For instance, comparing the air-speed velocity of an unladen African swallow to that of a European swallow.</p>

<p>  &#9675; Priorities, test the code that is most important to your project succeeding. For example, keeping your user&rsquo;s password private, a necessity for success.</p>

<p>  &#9675; The Happy Path, what should happen when your user succeeds in doing what they&rsquo;re doing.</p>

<p>  &#9675; The Unhappy Path, what should happen when your user does not succeed.</p>

<p>  &#9675; Edge cases</p>

<p>  &#9675; Extraneous bugs</p>

<h2>What you should not test is rather simple&hellip;</h2>

<p>  &#9675; Don&rsquo;t test basic code like &ldquo;Hello World&rdquo;.downcase(), Rails and it&rsquo;s libraries and gems have their own built-in tests.</p>

<p>  &#9675; Third-party APIs, they also have their own tests</p>

<p>  &#9675; Already tested code</p>

<h3>Words of Warning</h3>

<p>  &#9675; Bad, partial, or broken tests are worse than no tests. If you know it won&rsquo;t work don&rsquo;t use it!</p>

<p>  &#9675; Keep test suites fast, you shouldn&rsquo;t run tests and have it complete 24 hours later.</p>

<p>  &#9675; Run tests often, every time you make a change</p>

<p>  &#9675; Run test before pushing code</p>

<p>  &#9675; Brittle tests suck, make them hard as nails</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Touch And Hold Swift]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/11/03/touch-and-hold-swift/"/>
    <updated>2015-11-03T12:54:09-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/11/03/touch-and-hold-swift</id>
    <content type="html"><![CDATA[<p>Recently, at VID, I created a functional iPad application for a client&rsquo;s property platform. One function was panning a 360 image on a Windows application.</p>

<!--more-->


<p>Prior to working on these Swift methods our team created a Windows launcher and API to connect with and show these images on the screen. One of the images that needed panoramic capability were the floor views. In the Main.storyboard file I created one View Controller for these API calls. As you can see each view has a left and right arrow which will repeat call the API to move left or right.</p>

<p><img src="/images/touch-hold/General.png"/></p>

<p>To be brief, here is one variable of the first right button on the Main.storyboard as well as the leftTimer and rightTimer variables that will be used in the future &ldquo;touch and hold&rdquo; methods.</p>

<p><figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="vi">@IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="ss">right1Button</span><span class="p">:</span> <span class="no">UIButton</span><span class="o">!&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  var leftTimer : NSTimer? = nil</span>
</span><span class='line'><span class="sr">  var rightTimer : NSTimer? = nil</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>leftButtonDown</code> and <code>rightButtonDown</code> methods repeatedly call the <code>moveLeft</code> or <code>moveRight</code> methods every 0.1 second while the user continues to press the view button. Once the user lifts their finger up which is considered a <code>Touch Up</code> type of Swift method the timer becomes invalid and panoramic capability ceases.</p>

<p><figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="sr">//</span>  <span class="no">PANORAMIC</span> <span class="no">CAPABILITY</span>
</span><span class='line'>    <span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">leftButtonDown</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">leftTimer</span> <span class="o">=</span> <span class="no">NSTimer</span><span class="o">.</span><span class="n">scheduledTimerWithTimeInterval</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="ss">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">selector</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">moveLeft</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">userInfo</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">repeats</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@IBAction func leftButtonUp(sender: UIButton) {</span>
</span><span class='line'><span class="sr">    leftTimer!.invalidate()</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">@IBAction func rightButtonDown(sender: UIButton){</span>
</span><span class='line'><span class="sr">    rightTimer = NSTimer.scheduledTimerWithTimeInterval(0.1, target: self, selector: &quot;moveRight&quot;, userInfo: nil, repeats: true)</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">@IBAction func rightButtonUp(sender: UIButton){</span>
</span><span class='line'><span class="sr">    rightTimer!.invalidate()</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>moveLeft</code> and <code>moveRight</code> methods are simple HTTP GET requests using a Swift NSMutableURLRequest(). In the Windows API this URL call will move the image a small percentage to the left or right, together with the panoramic capability methods this ensures a panoramic view without breaks.</p>

<p><figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="sr">//</span>    <span class="no">VIEW</span> <span class="no">URL</span> <span class="no">CALL</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">moveLeft</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="no">NSMutableURLRequest</span><span class="p">(</span><span class="ss">URL</span><span class="p">:</span> <span class="no">NSURL</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://(url!&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="p">(</span><span class="n">url!</span><span class="o">&lt;</span><span class="sr">/a&gt;)/</span><span class="no">BuildingViewer</span><span class="o">/</span><span class="n">rest</span><span class="o">/</span><span class="no">MoveLeft</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">HTTPMethod</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">GET</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">task</span> <span class="o">=</span> <span class="no">NSURLSession</span><span class="o">.</span><span class="n">sharedSession</span><span class="p">()</span><span class="o">.</span><span class="n">dataTaskWithRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;        if error != nil {</span>
</span><span class='line'><span class="sr">            print(&quot;error=\(error)&quot;)</span>
</span><span class='line'><span class="sr">            return</span>
</span><span class='line'><span class="sr">        }</span>
</span><span class='line'>
</span><span class='line'><span class="sr">        print(&quot;response = \(response)&quot;)</span>
</span><span class='line'><span class="sr">        let responseString = NSString(data: data!, encoding: NSUTF8StringEncoding)</span>
</span><span class='line'><span class="sr">        print(&quot;responseString = \(responseString)&quot;)</span>
</span><span class='line'><span class="sr">    }</span>
</span><span class='line'><span class="sr">    task.resume()</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">func moveRight() {</span>
</span><span class='line'><span class="sr">    let request = NSMutableURLRequest(URL: NSURL(string: &quot;http:/</span><span class="o">/</span><span class="p">\(</span><span class="n">url!</span><span class="p">)</span><span class="o">/</span><span class="no">BuildingViewer</span><span class="o">/</span><span class="n">rest</span><span class="o">/</span><span class="no">MoveRight</span><span class="s2">&quot;)!)</span>
</span><span class='line'><span class="s2">    request.HTTPMethod = &quot;</span><span class="no">GET</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {</span>
</span><span class='line'><span class="s2">        data, response, error in</span>
</span><span class='line'><span class="s2">        if error != nil {</span>
</span><span class='line'><span class="s2">            print(&quot;</span><span class="n">error</span><span class="o">=</span><span class="p">\(</span><span class="n">error</span><span class="p">)</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">            return</span>
</span><span class='line'><span class="s2">        }</span>
</span><span class='line'><span class="s2">        print(&quot;</span><span class="n">response</span> <span class="o">=</span> <span class="p">\(</span><span class="n">response</span><span class="p">)</span><span class="s2">&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">        let responseString = NSString(data: data!, encoding: NSUTF8StringEncoding)</span>
</span><span class='line'><span class="s2">        print(&quot;</span><span class="n">responseString</span> <span class="o">=</span> <span class="p">\(</span><span class="n">responseString</span><span class="p">)</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'><span class="s2">    task.resume()</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>All that&rsquo;s left is to connect the buttons with the methods we just created. Again, to be brief I only am showing the first right button but were we to look at all the buttons, the right buttons would look exactly like this while the left buttons would connect to the <code>leftButtonUp</code> and <code>leftButtonDown</code> methods.</p>

<p><img src="/images/touch-hold/RightButton.png"/></p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Ref-Spec Error]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/11/02/solving-ref-spec-error/"/>
    <updated>2015-11-02T15:53:05-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/11/02/solving-ref-spec-error</id>
    <content type="html"><![CDATA[<p>Notice: This worked for me but your problem may have a different solution.</p>

<!--more-->


<p>For some reason when I made some changes to my Octopress blog and git added, git committed, and git pushed to my origin/master branch I got this error:</p>

<p><img src="/images/ref-spec/error.png"/></p>

<p>At first I tried <code>git push -u origin master</code> or <code>git push origin master -f</code> to try and force a push to the &lsquo;origin/master&rsquo; branch but I was matched with the same error. After looking at Stack Overflow questions like <a href="http://stackoverflow.com/questions/21264738/error-src-refspec-master-does-not-match-any">error: src refspec master does not match any</a> I attempted some of the solutions. First I used <code>git push origin HEAD:master</code> which worked perfectly but I felt that was a cheap solution and wanted the answer not a cop-out.</p>

<p><img src="/images/ref-spec/show-ref.png"/></p>

<p>I then tried <code>git branch -mv origin master</code> which told me the origin ref was missing which I thought very strange since I could push to the &ldquo;origin/master&rdquo; branch. Let me check the git branches, voilà, there was no master branch. Now, I don&rsquo;t know how or why my master branch disappeared but that&rsquo;s for another day.</p>

<p><img src="/images/ref-spec/test.png"/></p>

<p>I re-intialized the git repository for good measure and created a branch called &lsquo;master&rsquo;. No erroneous alerts so I must be doing something right. When I checked the git branches again, there it was. So, I checked out into master and did my business. I think I held my breath when I entered <code>git push origin master</code>.</p>

<p><img src="/images/ref-spec/success.png"/></p>

<h2>TL;DR</h2>

<p>Step 0. Re-initialize the git repo</p>

<p>Step 1. <code>git branch master</code> and <code>git checkout master</code></p>

<p>Step 2. ???</p>

<p>Step 3. Profit</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Peasy and Medium Rare]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/10/15/easy-peasy-and-medium-rare/"/>
    <updated>2015-10-15T12:47:10-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/10/15/easy-peasy-and-medium-rare</id>
    <content type="html"><![CDATA[<p>Creating the easy and medium difficulty methods for the ruby tic tac toe game.</p>

<!--more-->


<p>Last post I left off with a simple tic tac toe game that had no difficulty settings. For difficulty to be fully integrated into the current game we need to do the simplest thing first, ask the user what difficulty they would like to play at. I chose to place the &ldquo;choose_difficulty&rdquo; method at the beginning of the &ldquo;random_start&rdquo; method. I chose this for future revisions when I create an extreme difficulty that may take time to finish and may only be used in a 3x3 board.</p>

<p><figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:board</span><span class="p">,</span> <span class="ss">:slots</span><span class="p">,</span> <span class="ss">:difficulty</span><span class="p">,</span> <span class="ss">:boards</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def random_start</span>
</span><span class='line'><span class="sr">    # there should only be a difficulty setting when playing against computer</span>
</span><span class='line'><span class="sr">    choose_difficulty&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def choose_difficulty</span>
</span><span class='line'><span class="sr">    puts &amp;ldquo;What difficulty would you like to play at? &amp;lt; beginner /</span> <span class="n">medium</span> <span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="vi">@difficulty</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>    <span class="c1"># if difficulty is none of the options then recursion</span>
</span><span class='line'>    <span class="c1"># if @difficulty != &amp;ldquo;beginner&amp;rdquo; &amp;amp;&amp;amp; @difficulty != &amp;ldquo;medium&amp;rdquo; &amp;amp;&amp;amp; @difficulty != &amp;ldquo;hard&amp;rdquo; &amp;amp;&amp;amp; @difficulty != &amp;ldquo;extreme&amp;rdquo;</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@difficulty</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">beginner</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="vi">@difficulty</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">medium</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Invalid</span> <span class="n">input</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>      <span class="n">choose_difficulty</span>
</span><span class='line'>    <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see I&rsquo;ve asked the user which difficulty level they&rsquo;re like to play at and set that to an instance variable called difficulty. As a side-note this means we must now add difficulty to the attr_accessor list of variables. Additionally, we need to check if @difficulty is valid, if not then through recursion call the &ldquo;choose_difficulty&rdquo; method again.</p>

<p>Since difficulty only needs to used for a game against a computer the difficulty methods only need to be used in the computer class. Under the &ldquo;play_move&rdquo; method is the best place to call the difficulty methods. You could use any type of test on the difficulty variable to call a specific difficulty method.</p>

<p><figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="c1">#from player</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_move</span><span class="p">(</span><span class="n">mark</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#take the symbol &amp;ldquo;x&amp;rdquo; or &amp;ldquo;o&amp;rdquo;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">The</span> <span class="n">computer</span> <span class="n">is</span> <span class="n">moving</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if @game.difficulty == &quot;beginner&quot;</span>
</span><span class='line'><span class="sr">  move = beginner_move</span>
</span><span class='line'><span class="sr"># else</span>
</span><span class='line'><span class="sr">elsif @game.difficulty == &quot;medium&quot;</span>
</span><span class='line'><span class="sr">  move = medium_move</span>
</span><span class='line'><span class="sr">elsif @game.difficulty == &quot;hard&quot;</span>
</span><span class='line'><span class="sr">  move = hard_move</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  move = extreme_move</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">#the index of the game board gets that mark</span>
</span><span class='line'><span class="sr">@game.board[move-1] = mark</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The computer&rsquo;s move in a beginner game should choose a space randomly. We can copy a line from our previous code and use it in our beginner_move method.</p>

<p><figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">beginner_move</span>
</span><span class='line'>    <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For the &ldquo;medium_move&rdquo; method and any following methods we need to take the size of the board into consideration. If the amount of slots%2 == 0 then the number is even, which means there is no finite center on the board. If there is a center slot then we want to take that and the corners first, from there we can take a random spot.</p>

<p>If there is no specific center then we want to take two diagonal slots from the center four slots. From there we can take the corners and then a random slot.</p>

<p><figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">medium_move</span>
</span><span class='line'>    <span class="c1"># if @slots%2 = 0 then the number is even so there is no center</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="c1"># check first center.first</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check second center.second</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check first center.second</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check second center.first</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check top left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="c1"># check bottom right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check top right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check bottom left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="c1"># if @slots%2 != 0 then the number is odd so there is a center</span>
</span><span class='line'>      <span class="c1"># check center</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="c1"># check top left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="c1"># check bottom right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check top right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check bottom left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I wanted to put the more complicated logic that actively fights against the human user in the &ldquo;hard_move&rdquo; method and unbeatable logic in the &ldquo;extreme_move&rdquo; method.</p>

<p><figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">hard_move</span>
</span><span class='line'>    <span class="c1"># use center, then block user, then corners, then block user, then try to win a line</span>
</span><span class='line'>    <span class="c1"># this should be kind of similar to my original-original code</span>
</span><span class='line'>    <span class="c1"># should incoporate for all board sizes</span>
</span><span class='line'>    <span class="c1"># if @slots%2 = 0 then the number is even so there is no center</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def extreme_move</span>
</span><span class='line'><span class="sr">    # use unbeatable code</span>
</span><span class='line'><span class="sr">  end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Look for another update on finished logic for the hard and extreme difficulties.</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical | Christina Leuci]]></title>
  <link href="http://ChristinaLeuci.github.io/blog/categories/technical/atom.xml" rel="self"/>
  <link href="http://ChristinaLeuci.github.io/"/>
  <updated>2015-01-14T13:14:32-05:00</updated>
  <id>http://ChristinaLeuci.github.io/</id>
  <author>
    <name><![CDATA[Christina Leuci]]></name>
    <email><![CDATA[christinaleuci@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Uploading Javascript or HTML to Scala Content Manager]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/01/14/uploading-javascript-or-html-to-content-manager/"/>
    <updated>2015-01-14T12:09:49-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/01/14/uploading-javascript-or-html-to-content-manager</id>
    <content type="html"><![CDATA[<p>Step by step of uploading your Javascript or HTML files to the Scala Content Manager.</p>

<!--more-->


<p>To upload files like Javascript or HTML to the Scala Content Mangar you must create a widget. To do this your must put all your files into one folder as such</p>

<p><img src="/images/widget/widget.jpg"/></p>

<p>Once these files are all under the main folder you can then compress that folder, this creates a <span style="italics">.zip</span> file. Change the file extension to <span style="italics">.wgt</span>. Once this is done you can upload your widget to the Scala Content Manager.</p>

<p>This file can then be uploaded to a player like an Intel Nook.</p>

<p>Keep on being bad ass!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Arrays To Your Rails Database]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/22/add-arrays-to-your-rails-database/"/>
    <updated>2014-12-22T13:38:32-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/22/add-arrays-to-your-rails-database</id>
    <content type="html"><![CDATA[<p>Have you ever been looking at your database wondering how you can change that string or integer into an array or a hash?</p>

<!--more-->


<p>Before we start with the code make sure you have a database and it&rsquo;s model created in your Rails app.</p>

<p>I currently have it setup so that my Wardrobe is initiaized upon a User&rsquo;s creation. For a usual serialization you will only need two lines of code and optionally a method.</p>

<p><figure class='code'><figcaption><span>[wardrobe.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Wardrobe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>    <span class="n">serialize</span> <span class="ss">:wardrobe</span>
</span><span class='line'>    <span class="n">after_create</span> <span class="ss">:serialize_wardrobe</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def serialize_wardrobe</span>
</span><span class='line'><span class="sr">  self.wardrobe = {:tops =&amp;gt; [], :bottoms =&amp;gt; []}</span>
</span><span class='line'><span class="sr">  self.save!</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I used the serialize method that you can research more about <a href="http://apidock.com/rails/ActiveRecord/Base/serialize/class">here</a>. As a note although my class&rsquo;s name is Wardrobe I also have a param underneath that named wardrobe. You should use the param name you want to be serialized.</p>

<p>After serializing the wardrobe, which happens upon initialization, I decided to specify what would be inside that serialized wardrobe param by using an <span style="font-style: italics">after_create</span> method. Inside my after_create method I described that the wardrobe param hash should contain two keys with their respective arrays and it should be saved.</p>

<p>That&rsquo;s it! Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AWS Image Hosting for Rails]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/19/setting-up-aws-with-your-rails-app/"/>
    <updated>2014-12-19T12:17:11-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/19/setting-up-aws-with-your-rails-app</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using only a couple of photos with your Rails application then it&rsquo;s pretty simple. If you&rsquo;re going to be using hundreds of thousands of photos you&rsquo;ll need a hosting site like Amazon S3.</p>

<!--more-->


<h2>Step 1 &ndash; Have An Account</h2>

<p>If you don&rsquo;t have an account with Amazon&rsquo;s S3 hosting service this step is for you. If you already have an account already please go to <span style="font-style: italics"> Step 2 </a>. Fortunately <a href="http://aws.amazon.com/s3/">Amazon</a>&rsquo;s hosting services are free for the first 12-months. You will need to sign up for an account with your Amazon email and password. And that&rsquo;s it you&rsquo;re finished! You can now start integrating your Amazon S3 console with buckets and files. <span style="font-style: italics">A word to the wise: if you&rsquo;re new to Amazon S3 you should manually create a bucket inside your Amazon S3 account before accessing the AWS Client!</span></p>

<h2>Step 3 &ndash; Create A Pretty Access Key</h2>

<p>As with any API you will need an account access key and an account password. You will be able to access your Security Credentials by going to the nav bar on the top and clicking either on your name or &ldquo;My Account&rdquo; depending on what page you&rsquo;re on and selecting Security Credentials. Click &ldquo;Create New Key Access&rdquo;, this will show both your new access key and secret. You should download the Key and Secret file since your secret will no longer be available after you close the pop-up.</p>

<p>Awesome, now you have your access key and secret! Almost done!</p>

<h2>Step 2 &ndash; Client Interface Dawg</h2>

<p>After much trial and error I found the best approach to accessing Amazon S3 was to download the <a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">AWS Client Line Interface</a> and the add a Bucket Policy Editor to the bucket&rsquo;s properties. The AWS CLI has two installations options which covers Windows, Unix, and Unix clone systems and it&rsquo;s pretty straight forward. Once that is installed you will need to type &ldquo;aws configure&rdquo; in your terminal while you are inside your application&rsquo;s main folder. I&rsquo;m using Mac OSx so it may be alittle different for Windows based systems. This will prompt you for your access key, secret, region, and output format. I have found that the region and output format are not all too important for simple calls to the hosting site.</p>

<h2>Step 3 &ndash; Super Cool Policy Creator</h2>

<p>At this point your application now recognizes that AWS key and secret with it&rsquo;s config file. What you will now need to do is change the S3&rsquo;s bucket policy. By going into your Amazon S3 console and clicking on your bucket, the right side options <span style="font-style: italics">Properties</span> should light up. Click on this and click again on <span style="font-style: italics">Permissions</span>. Here you can see who has access to this bucket, if you haven&rsquo;t changed anything you should see only your username with all the following radio boxes checked.</p>

<p>Right underneath your name is a button called <span style="font-style:italics">Edit Bucket Policy</span>, click that. Here you can describe what actions people accessing your bucket will be able to perform. You can choose to use the <span style="font-style:italics">AWS Policy Generator</span> button but I have found that process to be convoluted and it ended up not giving me the policy I wanted.</p>

<p>Since this Bucket will only be used for the Curate Analytics site and no one else has access to the access key and secret I thought it best to allow all actions by placing a &ldquo;*&rdquo; for the AWS and Action lines. I may change this in the future but feel free to play around with actions. These Amazon S3 <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">docs</a> are really great.</p>

<p>Don&rsquo;t forget to add YOUR bucketname down there!
<figure class='code'><figcaption><span>[AWS Bucket Policy] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    &ldquo;Version&rdquo;: &ldquo;2008-10-17&rdquo;,
</span><span class='line'>    &ldquo;Statement&rdquo;: [
</span><span class='line'>      {
</span><span class='line'>        &ldquo;Sid&rdquo;: &ldquo;Stmt1418573913031&rdquo;,
</span><span class='line'>        &ldquo;Effect&rdquo;: &ldquo;Allow&rdquo;,
</span><span class='line'>        &ldquo;Principal&rdquo;: {
</span><span class='line'>          &ldquo;AWS&rdquo;: &ldquo;&lt;em>&rdquo;
</span><span class='line'>        },
</span><span class='line'>        &ldquo;Action&rdquo;: &ldquo;s3:&lt;/em>&rdquo;,
</span><span class='line'>        &ldquo;Resource&rdquo;: &ldquo;arn:aws:s3:::&lt;bucket name>/*&rdquo;
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure></p>

<h2>Step 4 &ndash; All About That Code</h2>

<p>You can finally start adding code to your Rails app. Inside the models you want the bucket to be accessed through you can write this line of code</p>

<p><figure class='code'><figcaption><span>[AWS Access Code] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s3 = AWS::S3.new
</span><span class='line'>    bucket = s3.buckets[&lsquo;&lt;bucket name>&rsquo;]
</span><span class='line'>    bucket.objects.each do |obj|
</span><span class='line'>      if obj =~ /swipe batches/i &amp;&amp; obj =~ /jpg/i
</span><span class='line'>        self.sort_objs(obj.key)
</span><span class='line'>      end
</span><span class='line'>    end</span></code></pre></td></tr></table></div></figure></p>

<p>Like with any class you&rsquo;ve initialized a new connection to the Amazon S3. Since your AWS account keys and secrets are hooked to this application&rsquo;s config you can call your S3 bucket.</p>

<p>Here I&rsquo;ve gone through each obj which will start with the top folders and travel down to the actual file. An example of some json feed would be <span style="font-style: italics">tops, tops/collars, tops/collar/image.jpg</span> It&rsquo;s a big of a hassle but you should be able to use regex like I used above to find all files with a certai word in it. The objects in the json feed are a little odd but this works for my purposes, you&rsquo;ll need to play around with loops and functions to see what works for your bucket.</p>

<p>And you should have access to your S3 bucket and images inside it.</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up An API On An Existing Rails Application]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/18/setting-up-an-api-on-an-existing-rails-application/"/>
    <updated>2014-12-18T12:48:34-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/18/setting-up-an-api-on-an-existing-rails-application</id>
    <content type="html"><![CDATA[<p>Hey y&#8217;all it&rsquo;s been a long time! Life has been a bit busy at the moment and I&rsquo;ll write a blog all about that in the non-technical session ASAP.</p>

<!--more-->


<p>Today I&rsquo;m going to talk about setting up your current Rails application with an API. This is assuming that you have a working Rails application, preferably with data to see in the browser when you have it up and running through the rails server.</p>

<h2>The Pre-Coding Code</h2>

<p>So before we do any serious setup the first thing we will need to do is access the rails-api gem. To do this put this line inside your Gemfile file</p>

<p><figure class='code'><figcaption><span>[Gemfile] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem &lsquo;rails-api&rsquo; , require: &lsquo;rails-api/action_controller/api&rsquo;</span></code></pre></td></tr></table></div></figure></p>

<p>and bundle install.</p>

<h2>Ain&rsquo;t No Basic Controller</h2>

<p>At this point you will have access to the API Action Controller which I suggest you read up on in the <a href="http://api.rubyonrails.org/">Ruby on Rails API docs</a>. So now that your application is ready for API goodness you&rsquo;ll want to create a sub-folder underneath your <span font-style="italics">app/controllers</span> titled <span style="font-weight: 500"> api </a>.</p>

<p>At this point underneath <span font-style="italics">app/controllers</span> you should have your main controllers, ie. application_controller or user_controller, and your <span font-style="italics">api</span> folder.</p>

<p>Now inside this api folder you will want to add an <span font-style="italics">api_controller.rb</span> file and an optional <span font-style="italics">v1</span> folder.</p>

<p>The <span font-style="italics">api_controller.rb</span> will be your API controller, this is essentially the application controller for your API. Inside your api_controller you will want to set it up similarly to the application_controller <figure class='code'><figcaption><span>[api_controller.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">ApiController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see we are no longer using the Base Action Controller, instead we&rsquo;re using the API Action Controller. This will be one of the sub controllers that will inherit from the Base Action Controller. If in the future you want to implement an API sign in option with a username and secret as many api&rsquo;s have now-a-days this if the file you would do this in.</p>

<p>At this point you should have the <span font-style="italics">api_controller.rb</span> setup and hopefully, but not required, the <span font-style="italics">v1</span> folder setup.</p>

<p>I suggest implement the <span font-style="italics">v1</span> folder incase you decide to create multiple versions of the api in the future.</p>

<p>So let&rsquo;s say you have the <span font-style="italics">v1</span> setup. Inside this folder you will have all of the controllers you&rsquo;re find in the main controllers folder. Currently I am using an api user_controller to allow api users to access the users in the system.</p>

<h2>Get The Data You Want</h2>

<p>Inside the <span font-style="italics">user_controller.rb</span> you will want to set it up depending on which information you want to be shown. Let&rsquo;s say that your application user_controller has both index and show methods, this will mean your API user_controller will also have index and show methods.</p>

<p><figure class='code'><figcaption><span>[api/v1/user_controller.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">UserController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Api</span><span class="o">::</span><span class="no">ApiController</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">MimeResponds</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@users</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@user</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here I have set it up so that when the api user goes to <span font-style="italics">example.com/api/v1/users.json</span> they will see all the users in the database. As you can see I put &ldquo;.json&rdquo; at the end of the html address, this is because inside the api user_controller I specified the format I want to respond to. I you wanted the api to respond to an xml call then you would put</p>

<p><figure class='code'><figcaption><span>[user_controller.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span><span class="n">render</span> <span class="ss">xml</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p> or even allowing access to both json and xml calls</p>

<p> <figure class='code'><figcaption><span>[user_controller.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>    <span class="k">if</span> <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span><span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span><span class="n">render</span> <span class="ss">xml</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<p> I setup the user.show api call similarly. When an api user calls <span font-style="italics">example.com/api/v1/users/1.json</span> this will show that specific user&rsquo;s data.</p>

<h2>Almost Done</h2>

<p>Awesome, you&rsquo;re almost done. Just like any other controller you will need to set up the routes.
<figure class='code'><figcaption><span>[config/routes.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">resources</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">resources</span> <span class="ss">:other_controllers</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I chose to organize my api groups of controllers under a namespace and again under a v1 namespace. This allows me to organize my routes instead of searching for them through the document. Optionally I chose to make my <span font-style="italics">api/user_controller.rb</span> also a namespace. This requires me to access my other api controllers based on the user api controller.</p>

<p>And that&rsquo;s it! Keep on being badass! &lt;3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tictactoe in Ruby]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/11/03/tictactoe-in-ruby/"/>
    <updated>2014-11-03T14:20:03-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/11/03/tictactoe-in-ruby</id>
    <content type="html"><![CDATA[<p>This is a really quick Ruby tictactoe program that really feels like it&rsquo;s playing against you.</p>

<!--more-->


<p>I created this a couple of months ago so it may not be the most optimized it can be but it works which is the important thing. What you must first do is define the parameters of the board</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>all the different slots that you can play&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>@slots = {
</span><span class='line'>  &ldquo;a1&rdquo;=>&ldquo; &rdquo;,&ldquo;a2&rdquo;=>&ldquo; &rdquo;,&ldquo;a3&rdquo;=>&ldquo; &rdquo;,
</span><span class='line'>  &ldquo;b1&rdquo;=>&ldquo; &rdquo;,&ldquo;b2&rdquo;=>&ldquo; &rdquo;,&ldquo;b3&rdquo;=>&ldquo; &rdquo;,
</span><span class='line'>  &ldquo;c1&rdquo;=>&ldquo; &rdquo;,&ldquo;c2&rdquo;=>&ldquo; &rdquo;,&ldquo;c3&rdquo;=>&ldquo; &rdquo;
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>all 8 winning matches&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>@winning = [
</span><span class='line'>  [&lsquo;a1&rsquo;, &lsquo;a2&rsquo;, &lsquo;a3&rsquo;],
</span><span class='line'>  [&lsquo;b1&rsquo;, &lsquo;b2&rsquo;, &lsquo;b3&rsquo;],
</span><span class='line'>  [&lsquo;c1&rsquo;, &lsquo;c2&rsquo;, &lsquo;c3&rsquo;],
</span><span class='line'>  [&lsquo;a1&rsquo;, &lsquo;b1&rsquo;, &lsquo;c1&rsquo;],
</span><span class='line'>  [&lsquo;a2&rsquo;, &lsquo;b2&rsquo;, &lsquo;c2&rsquo;],
</span><span class='line'>  [&lsquo;a3&rsquo;, &lsquo;b3&rsquo;, &lsquo;c3&rsquo;],
</span><span class='line'>  [&lsquo;a1&rsquo;, &lsquo;b2&rsquo;, &lsquo;c3&rsquo;],
</span><span class='line'>  [&lsquo;c1&rsquo;, &lsquo;b2&rsquo;, &lsquo;a3&rsquo;]
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure></p>

<p>The next thing you need to do is initialize the players, you and the computer. In the method below we define the computer&rsquo;s name as Computer and prints out the lines before taking in a user&rsquo;s name.</p>

<p><figure class='code'><figcaption><span>tictactoe.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;player names; introduction&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@comp_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Computer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">TIC</span> <span class="no">TAC</span> <span class="no">TOE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Player</span><span class="p">,</span> <span class="n">what</span> <span class="n">is</span> <span class="n">your</span> <span class="nb">name</span><span class="p">?</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="no">STDOUT</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="vi">@player_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>What we must now decide is who&rsquo;s turn it will be. I decided to create some logic that randomnly selects who will go first.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>determine who is X or O&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>use .5 because only 2 options [x or o]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>@comp = rand() > 0.5 ? &lsquo;X&rsquo; : &lsquo;O&rsquo;
</span><span class='line'>@player = @comp == &lsquo;X&rsquo; ? &lsquo;O&rsquo; : &lsquo;X&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>actually initiating the methods&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p> if(@player == &lsquo;X&rsquo;)
</span><span class='line'>  puts &lsquo;&rsquo;
</span><span class='line'>  puts &ldquo;#{@player_name} has the first turn&rdquo;
</span><span class='line'>  player_turn
</span><span class='line'>else
</span><span class='line'>  puts &lsquo;&rsquo;
</span><span class='line'>  puts &ldquo;#{@comp_name} has the first turn&rdquo;
</span><span class='line'>  comp_turn
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>At this point we have defined the parameters of the game, who the players are, and who will go first. What we must do now is draw the game and figure out the logic that allows the computer to be a worthy opponent. Let&rsquo;s start with an easy method to draw the board.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>draw game method shows slots, empty and full&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def draw_game
</span><span class='line'>  puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  puts &ldquo;TIC TAC TOE&rdquo;
</span><span class='line'>  puts &ldquo;#{@comp_name}: #{@comp}&rdquo;
</span><span class='line'>  puts &ldquo;#{@player_name}: #{@player}&rdquo;
</span><span class='line'>  puts &ldquo;&rdquo;
</span><span class='line'>  puts &ldquo;   a   b   c&rdquo;
</span><span class='line'>  puts &ldquo;&rdquo;
</span><span class='line'>  puts &ldquo; 1 #{@slots["a1&rdquo;]} | #{@slots[&ldquo;b1&rdquo;]} | #{@slots[&ldquo;c1&rdquo;]}&ldquo;
</span><span class='line'>  puts &rdquo;   &mdash;&mdash;&mdash;&ldquo;
</span><span class='line'>  puts &rdquo; 2 #{@slots[&ldquo;a2&rdquo;]} | #{@slots[&ldquo;b2&rdquo;]} | #{@slots[&ldquo;c2&rdquo;]}&ldquo;
</span><span class='line'>  puts &rdquo;   &mdash;&mdash;&mdash;&ldquo;
</span><span class='line'>  puts &rdquo; 3 #{@slots[&ldquo;a3&rdquo;]} | #{@slots[&ldquo;b3&rdquo;]} | #{@slots[&ldquo;c3&rdquo;]}&ldquo;
</span><span class='line'>  puts &rdquo;&ldquo;
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>What this will print out is a board that contains the slot names ie. &ldquo;a1&hellip;a2&rdquo; in their slots. At this point we can start dealing with the more complicated logic. Let&rsquo;s begin by starting with the two methods we defined earlier when we figured out which player would go first.</p>

<p>Let&rsquo;s walk through the player_turn method. It begins by drawing the game and then asks the player to make a move by typing in a slot. Inside the method we check if the slot the user inputted is legitimate. If it&rsquo;s not we call the wrong_move or wrong_input method&rsquo;s but we&rsquo;ll cover that in just a second.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def player_turn
</span><span class='line'>  puts &ldquo;&rdquo;
</span><span class='line'>  draw_game
</span><span class='line'>  puts &ldquo;#{@player_name}, please make a move or type &lsquo;exit&rsquo; to quit&rdquo;
</span><span class='line'>  STDOUT.flush
</span><span class='line'>  input = gets.chomp.downcase
</span><span class='line'>  if input.length == 2
</span><span class='line'>    a = input.split(&ldquo;&rdquo;)
</span><span class='line'>    if([&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;].include? a[0])
</span><span class='line'>      if([&lsquo;1&rsquo;,&lsquo;2&rsquo;,&lsquo;3&rsquo;].include? a[1])
</span><span class='line'>        if @slots[input] == &ldquo; &rdquo;
</span><span class='line'>          @slots[input] = @player
</span><span class='line'>          puts &ldquo;&rdquo;
</span><span class='line'>          puts &ldquo;#{@player_name} marks #{input.upcase}&rdquo;
</span><span class='line'>      #puts times.times_in_column
</span><span class='line'>          check_game(@comp)
</span><span class='line'>        else
</span><span class='line'>          wrong_move
</span><span class='line'>        end
</span><span class='line'>      else
</span><span class='line'>        wrong_input
</span><span class='line'>      end
</span><span class='line'>    else
</span><span class='line'>      wrong_input
</span><span class='line'>    end
</span><span class='line'>  else
</span><span class='line'>    wrong_input unless input == &lsquo;exit&rsquo;
</span><span class='line'>  end
</span><span class='line'> end</span></code></pre></td></tr></table></div></figure></p>

<p>The wrong_move and wrong_input methods are very simple. If the input the user gives is wrong then the program prints out that the player inputed the wrong string. It calls the player_turn method again for the player to pick another turn.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def wrong_move
</span><span class='line'>  puts &ldquo;&rdquo;
</span><span class='line'>  puts &ldquo;You must choose an empty slot&rdquo;
</span><span class='line'>  player_turn
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def wrong_input
</span><span class='line'>  puts &ldquo;&rdquo;
</span><span class='line'>  puts &ldquo;Please specify a move with the format &lsquo;A3&rsquo; , &lsquo;B1&rsquo; , &lsquo;C2&rsquo; etc.&rdquo;
</span><span class='line'>  player_turn
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>If we walk through the code at this point as a player we find ourselves at the check_game method. This is a main method in our program so let&rsquo;s take a break from the player path and delve more into the computer path so we can find ourselves again at the check_game method.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def comp_turn
</span><span class='line'>  move = comp_find_move
</span><span class='line'>  @slots[move] = @comp
</span><span class='line'>  puts &ldquo;&rdquo;
</span><span class='line'>  puts &ldquo;#{@comp_name} marks #{move.upcase}&rdquo;
</span><span class='line'>  check_game(@player)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>The first method we encounter here is the comp_find_move method. This will decide the next move that the computer will take before we check the game for a winner or loser. Let&rsquo;s go over the comp_find_move method now to go over the logic involved in the computer finding it&rsquo;s next move.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def comp_find_move
</span><span class='line'>  #choosing best comp choice 2 in column
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @comp) == 2
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  #defending against the player first
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @player) == 2
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  #third best comp choice only one in column
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @comp) == 1
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  #choosing an empty slot
</span><span class='line'>  k = @slots.keys;
</span><span class='line'>  j = rand(k.length)
</span><span class='line'>  if @slots[k[j]] == &ldquo; &rdquo;
</span><span class='line'>    return k[j]
</span><span class='line'>  else
</span><span class='line'>    #first empty slot
</span><span class='line'>    @slots.each { |k,m| return k if m == &ldquo; &rdquo; }
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>This method figures out the best moves the computer can make to make sure it beats the player. The first if clause chooses a slot if the computer already has two slots in a line. The next if clause chooses a slot to defend against the player. The last if clause chooses a slot if the computer already has one slot in a row on the board. If all these if clauses have failed then the computer chooses an empty slot.</p>

<p>Let&rsquo;s go over the times_in_column and empty_in_column methods before we go over the check_game method.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def times_in_column arr, item
</span><span class='line'>  times = 0
</span><span class='line'> #arr.each do |i|
</span><span class='line'> for i in [arr] do
</span><span class='line'>    if @slots[i] != &ldquo; &rdquo;
</span><span class='line'>    times += 1
</span><span class='line'>    unless @slots[i] == item || @slots[i] == &ldquo; &rdquo;
</span><span class='line'>      return 0
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  return times
</span><span class='line'>  end
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def empty_in_column arr
</span><span class='line'>  arr.each do |i|
</span><span class='line'>    if @slots[i] == &ldquo; &rdquo;
</span><span class='line'>      return i
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>These two methods are very simple. The times_in_column method count the slots that are in a column. So if there were three slots in a column it would return three. Similarly the empty_in_column method returns if there is an empty space in that column.</p>

<p>At this point we&rsquo;ve handled all the minor methods, we have one more method to go, the check_game method. This will essentially tell us if there is a winner, a tie, or if the game needs to continue.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>checking winnings or loses or continuings&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def check_game(next_turn)
</span><span class='line'>  game_over = false
</span><span class='line'>  #@winnings.each do |column|
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    #comp has won?
</span><span class='line'>    if times_in_column(column, @comp) == 3 #three in a row
</span><span class='line'>    puts &ldquo;&rdquo;
</span><span class='line'>      puts &ldquo;Game Over Dude, the Computer won!!!&rdquo;
</span><span class='line'>      game_over = true
</span><span class='line'>    end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>#player has won?
</span><span class='line'>if times_in_column(column, @player) == 3 #three in a row
</span><span class='line'>puts ""
</span><span class='line'>  puts "Game Over YOU win!!!"
</span><span class='line'>  game_over = true
</span><span class='line'>end
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>  unless game_over
</span><span class='line'>    if(moves_left > 0) #no moves left
</span><span class='line'>      if(next_turn == @player) #from comp_turn method
</span><span class='line'>        player_turn
</span><span class='line'>      else
</span><span class='line'>        comp_turn #from player_turn method
</span><span class='line'>    end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>else
</span><span class='line'>  puts ""
</span><span class='line'>  puts "Game Over -- DRAW!"
</span><span class='line'>game_over = true
</span><span class='line'>end
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>This method begins by setting a game_over value to false. In the first if loop we figure out if the computer has three slots in a row, if that&rsquo;s true the program outputs that the computer has won and the program stops. If the player has three slots in a row then the program outputs that the player has won and the program stops.</p>

<p>The final if statement checks to make sure that there are no more moves left. If there are more moves left then it figures out who has the next move. If there are no more moves left it outputs that the game has ended in a draw and the program stops.</p>

<p>If you haven&rsquo;t noticed we have one small problem, we still need to define the moves_left method. This last piece completes the program. This method goes through the board to see if there is another slot open for a move to be completed.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def moves_left
</span><span class='line'>  slots = 0
</span><span class='line'>  @slots.each do |k, v|
</span><span class='line'>    slots += 1 if v == &ldquo; &rdquo;
</span><span class='line'>  end
</span><span class='line'>  slots
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>As with any good program there are always ways to optimize the code, let me know what you think of the code. Keep on being badass!</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Christina Leuci]]></title>
  <link href="http://ChristinaLeuci.github.io/atom.xml" rel="self"/>
  <link href="http://ChristinaLeuci.github.io/"/>
  <updated>2015-11-04T11:03:48-05:00</updated>
  <id>http://ChristinaLeuci.github.io/</id>
  <author>
    <name><![CDATA[Christina Leuci]]></name>
    <email><![CDATA[christinaleuci@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Touch and Hold Swift]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/11/03/touch-and-hold-swift/"/>
    <updated>2015-11-03T12:54:09-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/11/03/touch-and-hold-swift</id>
    <content type="html"><![CDATA[<p>Recently, at VID, I created a functional iPad application for a client&rsquo;s property platform. One function was panning a 360 image on a Windows application.</p>

<!--more-->


<p>Prior to working on these Swift methods our team created a Windows launcher and API to connect with and show these images on the screen. One of the images that needed panoramic capability were the floor views. In the Main.storyboard file I created one View Controller for these API calls. As you can see each view has a left and right arrow which will repeat call the API to move left or right.</p>

<p><img src="http://ChristinaLeuci.github.io/images/touch-hold/General.png"/></p>

<p>To be brief, here is one variable of the first right button on the Main.storyboard as well as the leftTimer and rightTimer variables that will be used in the future &ldquo;touch and hold&rdquo; methods.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="vi">@IBOutlet</span> <span class="n">weak</span> <span class="n">var</span> <span class="ss">right1Button</span><span class="p">:</span> <span class="no">UIButton</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="n">leftTimer</span> <span class="p">:</span> <span class="no">NSTimer</span><span class="p">?</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">rightTimer</span> <span class="p">:</span> <span class="no">NSTimer</span><span class="p">?</span> <span class="o">=</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>leftButtonDown</code> and <code>rightButtonDown</code> methods repeatedly call the <code>moveLeft</code> or <code>moveRight</code> methods every 0.1 second while the user continues to press the view button. Once the user lifts their finger up which is considered a <code>Touch Up</code> type of Swift method the timer becomes invalid and panoramic capability ceases.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="sr">//</span>  <span class="no">PANORAMIC</span> <span class="no">CAPABILITY</span>
</span><span class='line'>    <span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">leftButtonDown</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">leftTimer</span> <span class="o">=</span> <span class="no">NSTimer</span><span class="o">.</span><span class="n">scheduledTimerWithTimeInterval</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="ss">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">selector</span><span class="p">:</span> <span class="s2">&quot;moveLeft&quot;</span><span class="p">,</span> <span class="ss">userInfo</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">repeats</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">leftButtonUp</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">leftTimer!</span><span class="o">.</span><span class="n">invalidate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">rightButtonDown</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="p">){</span>
</span><span class='line'>        <span class="n">rightTimer</span> <span class="o">=</span> <span class="no">NSTimer</span><span class="o">.</span><span class="n">scheduledTimerWithTimeInterval</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="ss">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">selector</span><span class="p">:</span> <span class="s2">&quot;moveRight&quot;</span><span class="p">,</span> <span class="ss">userInfo</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">repeats</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">rightButtonUp</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="p">){</span>
</span><span class='line'>        <span class="n">rightTimer!</span><span class="o">.</span><span class="n">invalidate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>moveLeft</code> and <code>moveRight</code> methods are simple HTTP GET requests using a Swift NSMutableURLRequest(). In the Windows API this URL call will move the image a small percentage to the left or right, together with the panoramic capability methods this ensures a panoramic view without breaks.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="sr">//</span>    <span class="no">VIEW</span> <span class="no">URL</span> <span class="no">CALL</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">moveLeft</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="no">NSMutableURLRequest</span><span class="p">(</span><span class="ss">URL</span><span class="p">:</span> <span class="no">NSURL</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;http://\(url!)/BuildingViewer/rest/MoveLeft&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">HTTPMethod</span> <span class="o">=</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">task</span> <span class="o">=</span> <span class="no">NSURLSession</span><span class="o">.</span><span class="n">sharedSession</span><span class="p">()</span><span class="o">.</span><span class="n">dataTaskWithRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;error=\(error)&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;response = \(response)&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">responseString</span> <span class="o">=</span> <span class="no">NSString</span><span class="p">(</span><span class="ss">data</span><span class="p">:</span> <span class="n">data!</span><span class="p">,</span> <span class="ss">encoding</span><span class="p">:</span> <span class="no">NSUTF8StringEncoding</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;responseString = \(responseString)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">moveRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">request</span> <span class="o">=</span> <span class="no">NSMutableURLRequest</span><span class="p">(</span><span class="ss">URL</span><span class="p">:</span> <span class="no">NSURL</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;http://\(url!)/BuildingViewer/rest/MoveRight&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">HTTPMethod</span> <span class="o">=</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">task</span> <span class="o">=</span> <span class="no">NSURLSession</span><span class="o">.</span><span class="n">sharedSession</span><span class="p">()</span><span class="o">.</span><span class="n">dataTaskWithRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;error=\(error)&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;response = \(response)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">responseString</span> <span class="o">=</span> <span class="no">NSString</span><span class="p">(</span><span class="ss">data</span><span class="p">:</span> <span class="n">data!</span><span class="p">,</span> <span class="ss">encoding</span><span class="p">:</span> <span class="no">NSUTF8StringEncoding</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;responseString = \(responseString)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that&rsquo;s left is to connect the buttons with the methods we just created. Again, to be brief I only am showing the first right button but were we to look at all the buttons, the right buttons would look exactly like this while the left buttons would connect to the <code>leftButtonUp</code> and <code>leftButtonDown</code> methods.</p>

<p><img src="http://ChristinaLeuci.github.io/images/touch-hold/RightButton.png"/></p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Ref-Spec Error]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/11/02/solving-ref-spec-error/"/>
    <updated>2015-11-02T15:53:05-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/11/02/solving-ref-spec-error</id>
    <content type="html"><![CDATA[<p>Notice: This worked for me but your problem may have a different solution.</p>

<!--more-->


<p>For some reason when I made some changes to my Octopress blog and git added, git committed, and git pushed to my origin/master branch I got this error:</p>

<p><img src="http://ChristinaLeuci.github.io/images/ref-spec/error.png"/></p>

<p>At first I tried <code>git push -u origin master</code> or <code>git push origin master -f</code> to try and force a push to the &lsquo;origin/master&rsquo; branch but I was matched with the same error. After looking at Stack Overflow questions like <a href="http://stackoverflow.com/questions/21264738/error-src-refspec-master-does-not-match-any">error: src refspec master does not match any</a> I attempted some of the solutions. First I used <code>git push origin HEAD:master</code> which worked perfectly but I felt that was a cheap solution and wanted the answer not a cop-out.</p>

<p><img src="http://ChristinaLeuci.github.io/images/ref-spec/show-ref.png"/></p>

<p>I then tried <code>git branch -mv origin master</code> which told me the origin ref was missing which I thought very strange since I could push to the &ldquo;origin/master&rdquo; branch. Let me check the git branches, voilà, there was no master branch. Now, I don&rsquo;t know how or why my master branch disappeared but that&rsquo;s for another day.</p>

<p><img src="http://ChristinaLeuci.github.io/images/ref-spec/test.png"/></p>

<p>I re-intialized the git repository for good measure and created a branch called &lsquo;master&rsquo;. No erroneous alerts so I must be doing something right. When I checked the git branches again, there it was. So, I checked out into master and did my business. I think I held my breath when I entered <code>git push origin master</code>.</p>

<p><img src="http://ChristinaLeuci.github.io/images/ref-spec/success.png"/></p>

<h2>TL;DR</h2>

<p>Step 0. Re-initialize the git repo</p>

<p>Step 1. <code>git branch master</code> and <code>git checkout master</code></p>

<p>Step 2. ???</p>

<p>Step 3. Profit</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Peasy and Medium Rare]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/10/15/easy-peasy-and-medium-rare/"/>
    <updated>2015-10-15T12:47:10-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/10/15/easy-peasy-and-medium-rare</id>
    <content type="html"><![CDATA[<p>Creating the easy and medium difficulty methods for the ruby tic tac toe game.</p>

<!--more-->


<p>Last post I left off with a simple tic tac toe game that had no difficulty settings. For difficulty to be fully integrated into the current game we need to do the simplest thing first, ask the user what difficulty they would like to play at. I chose to place the &ldquo;choose_difficulty&rdquo; method at the beginning of the &ldquo;random_start&rdquo; method. I chose this for future revisions when I create an extreme difficulty that may take time to finish and may only be used in a 3x3 board.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:board</span><span class="p">,</span> <span class="ss">:slots</span><span class="p">,</span> <span class="ss">:difficulty</span><span class="p">,</span> <span class="ss">:boards</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random_start</span>
</span><span class='line'>    <span class="c1"># there should only be a difficulty setting when playing against computer</span>
</span><span class='line'>    <span class="n">choose_difficulty</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">choose_difficulty</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;What difficulty would you like to play at? &lt; beginner / medium &gt;&quot;</span>
</span><span class='line'>    <span class="vi">@difficulty</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>    <span class="c1"># if difficulty is none of the options then recursion</span>
</span><span class='line'>    <span class="c1"># if @difficulty != &quot;beginner&quot; &amp;&amp; @difficulty != &quot;medium&quot; &amp;&amp; @difficulty != &quot;hard&quot; &amp;&amp; @difficulty != &quot;extreme&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@difficulty</span> <span class="o">!=</span> <span class="s2">&quot;beginner&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@difficulty</span> <span class="o">!=</span> <span class="s2">&quot;medium&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Invalid input&quot;</span>
</span><span class='line'>      <span class="n">choose_difficulty</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I&rsquo;ve asked the user which difficulty level they&rsquo;re like to play at and set that to an instance variable called difficulty. As a side-note this means we must now add difficulty to the attr_accessor list of variables. Additionally, we need to check if @difficulty is valid, if not then through recursion call the &ldquo;choose_difficulty&rdquo; method again.</p>

<p>Since difficulty only needs to used for a game against a computer the difficulty methods only need to be used in the computer class. Under the &ldquo;play_move&rdquo; method is the best place to call the difficulty methods. You could use any type of test on the difficulty variable to call a specific difficulty method.</p>

<figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="c1">#from player</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_move</span><span class="p">(</span><span class="n">mark</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#take the symbol &quot;x&quot; or &quot;o&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;The computer is moving...&quot;</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">difficulty</span> <span class="o">==</span> <span class="s2">&quot;beginner&quot;</span>
</span><span class='line'>      <span class="n">move</span> <span class="o">=</span> <span class="n">beginner_move</span>
</span><span class='line'>    <span class="c1"># else</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">difficulty</span> <span class="o">==</span> <span class="s2">&quot;medium&quot;</span>
</span><span class='line'>      <span class="n">move</span> <span class="o">=</span> <span class="n">medium_move</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">difficulty</span> <span class="o">==</span> <span class="s2">&quot;hard&quot;</span>
</span><span class='line'>      <span class="n">move</span> <span class="o">=</span> <span class="n">hard_move</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">move</span> <span class="o">=</span> <span class="n">extreme_move</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#the index of the game board gets that mark</span>
</span><span class='line'>    <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="n">move</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">mark</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The computer&rsquo;s move in a beginner game should choose a space randomly. We can copy a line from our previous code and use it in our beginner_move method.</p>

<figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">beginner_move</span>
</span><span class='line'>    <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the &ldquo;medium_move&rdquo; method and any following methods we need to take the size of the board into consideration. If the amount of slots%2 == 0 then the number is even, which means there is no finite center on the board. If there is a center slot then we want to take that and the corners first, from there we can take a random spot.</p>

<p>If there is no specific center then we want to take two diagonal slots from the center four slots. From there we can take the corners and then a random slot.</p>

<figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">medium_move</span>
</span><span class='line'>    <span class="c1"># if @slots%2 = 0 then the number is even so there is no center</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="c1"># check first center.first</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check second center.second</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check first center.second</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check second center.first</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># check top left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="c1"># check bottom right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check top right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check bottom left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="c1"># if @slots%2 != 0 then the number is odd so there is a center</span>
</span><span class='line'>      <span class="c1"># check center</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">[</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">][</span><span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="c1"># check top left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="c1"># check bottom right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check top right</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="c1"># check bottom left</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">boards</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wanted to put the more complicated logic that actively fights against the human user in the &ldquo;hard_move&rdquo; method and unbeatable logic in the &ldquo;extreme_move&rdquo; method.</p>

<figure class='code'><figcaption><span>[computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">hard_move</span>
</span><span class='line'>    <span class="c1"># use center, then block user, then corners, then block user, then try to win a line</span>
</span><span class='line'>    <span class="c1"># this should be kind of similar to my original-original code</span>
</span><span class='line'>    <span class="c1"># should incoporate for all board sizes</span>
</span><span class='line'>    <span class="c1"># if @slots%2 = 0 then the number is even so there is no center</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">extreme_move</span>
</span><span class='line'>    <span class="c1"># use unbeatable code</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look for another update on finished logic for the hard and extreme difficulties.</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Ruby Sends You Some X's and O's]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/09/30/when-ruby-sends-you-some-xs-and-os/"/>
    <updated>2015-09-30T15:37:10-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/09/30/when-ruby-sends-you-some-xs-and-os</id>
    <content type="html"><![CDATA[<p>New and improved Tic Tac Toe program! Now with more classes! Call now and receive a second one for 50% off!</p>

<!--more-->


<p>I recently interviewed at a company that asked that my first coding challenge assignment be an object-oriented Tic Tac Toe game. Good news I had a Tic Tac Toe game from when I applied to Flatiron. Bad news it wasn&rsquo;t object oriented. So it was time to map out how my new code was going to work, what new classes I would need to create, and what logic I would need to optimize. This will be a little longer than my current posts so you should probably grab a cup of hot chocolate and settle in for some intense programming and my subtle corny jokes.</p>

<p>The first thing I did was map out what classes I would need because as an object-oriented program I would need to have one class interact with another class. I ultimately decided on having a Game, Player, and Computer class. The Game class is where I have all my intial setup like creating the board, creating the players, and accessing the player moves. The Player class is where I have the logic behind assigning a Player&rsquo;s move. Lastly, the Computer class is where I have the logic behind the Computer&rsquo;s move.</p>

<h2>The Setup</h2>

<p>Let me walk you through the Game class. Since this is the main class that will access the other classes I first required the Player and Computer classes using <code>require_relative</code>, then I created a game initialization at the bottom.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">require_relative</span> <span class="s2">&quot;./player&quot;</span>
</span><span class='line'>  <span class="n">require_relative</span> <span class="s2">&quot;./computer&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>From there I created a <code>create_game</code> method that called on the setup methods and game play methods that the game would use. I called this method in the initialize method.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">require_relative</span> <span class="s2">&quot;./player&quot;</span>
</span><span class='line'>  <span class="n">require_relative</span> <span class="s2">&quot;./computer&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="n">create_game</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_game</span>
</span><span class='line'>      <span class="n">design_board</span>
</span><span class='line'>      <span class="n">create_players</span>
</span><span class='line'>      <span class="n">game_play</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">design_board</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_players</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">game_play</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll start with the board design method. Again I needed this to be a customizably sized board so I began by asking the user what size board they wanted. What I received was a string so I needed to change this string into an integer and I set that to @slots. The reason why I made slots an instance variable was because ultimately this variable was going to be shared between all the methods in this class and even outside the class in choosing a move. Now that slots was an instance variable I needed to created an attr_accessor at the beginning of the Game class. To ensure the user doesn&rsquo;t break the program I created an if clause that made sure @slots was between 3 and 5. If it wasn&rsquo;t then the <code>design_board</code> method was called again. If @slots was between 3 and 5 then I made @board, another instance variable, equal to <code>(1..@slots**2).to_a</code>. I made board an instance variable for the same reasons I made slots an instance variable.</p>

<p>Let me explain the logic of why I did what I did. As a personal decision, I kept it between 3 and 5 because can you imagine playing a 20x20 slotted game? YEESH! For the @board logic I went through each number between 1 and however many slots the user wanted squared. Let&rsquo;s say the user put in &lsquo;4&rsquo; this would create an array of [1, 2, 3 &hellip; 15, 16]. I used this logic for the user when they end up seeing the board.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:board</span><span class="p">,</span> <span class="ss">:slots</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##code##</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">design_board</span>
</span><span class='line'>    <span class="c1">#customizable board size</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;How big would you like the board to be? &lt; 3 / 4 / 5 &gt;&quot;</span>
</span><span class='line'>    <span class="c1">#changes slots size to integer</span>
</span><span class='line'>    <span class="vi">@slots</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@slots</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="vi">@slots</span> <span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;That is not valid.&quot;</span>
</span><span class='line'>      <span class="n">design_board</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#creates array of slot ^ 2. eg. 5 becomes 1..25</span>
</span><span class='line'>    <span class="vi">@board</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@slots</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">##code##</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create Your Very Own Lvl. 60 Paladin</h2>

<p>Next, I moved on to the <code>create_players</code> method. In the assignment guidelines it asked that I let the user choose between playing against another human or a computer. So the first line of business is asking the user that and taking in that response. I then created three if clauses, one for is the user wants a human, one for if the user wants a computer, and one if the user wants to break my program. If the user wants another human then that&rsquo;s simple, create two players using Player.new. Similarly simple, if the user puts in the wrong input then through recursion the method will be called again. For the moments when the user wants to play the computer I created another method called <code>random_start</code>; this method will end up asking the user who will play first.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">create_players</span>
</span><span class='line'>    <span class="c1">#decides if you will play computer or human</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Would you like your opponent to be a human or computer? &lt; h / c&gt;&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;h&quot;</span>
</span><span class='line'>      <span class="vi">@player1</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@player2</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;c&quot;</span>
</span><span class='line'>      <span class="n">random_start</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Invalid input&quot;</span>
</span><span class='line'>      <span class="n">create_players</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, for the <code>random_start</code> method. Like with the <code>create_player</code> method I asked the user who should go first and chomped that response. If the player said they wanted to play then Player 1 was the human and Player 2 was the computer, if they wanted the computer to start then Player 1 was the computer and Player 2 was the human. If the user wants to randomize then I decided on creating an if statement using the rand() Math method. This method will generate a float greater than or equal to 0.0 and less than 1.0, when compared to .5 this gives an equal 50/50 chance perfect for randomizing players.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">random_start</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Who should go first? &lt; you / computer / random&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;you&quot;</span>
</span><span class='line'>      <span class="vi">@player1</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@player2</span> <span class="o">=</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;computer&quot;</span>
</span><span class='line'>      <span class="vi">@player1</span> <span class="o">=</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@player2</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;random&quot;</span>
</span><span class='line'>      <span class="c1">#from past code </span>
</span><span class='line'>      <span class="c1">#determine who is player1 and who is player2</span>
</span><span class='line'>      <span class="vi">@player1</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="o">?</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">:</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@player2</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player1</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;Computer&quot;</span> <span class="p">?</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">:</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Invalid input&quot;</span>
</span><span class='line'>      <span class="n">random_start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deciding The Fate of the Universe</h2>

<p>Right now we have completed the initial setup of the application and we move onto the game play. So let&rsquo;s finish that final method, <code>game_play</code> that&rsquo;s called in <code>create_game</code>. Game play will be where the actual game steps are accessed, this is will involve counting turns, the player moves, checking for a winner, and exiting or playing the game again. Let&rsquo;s create some variables with an intial value before we work on the logic. As I metioned earlier we need to track the turns so let&rsquo;s make @turn = 0 at the top of the <code>game_play</code> method. We will also need to check for a winner during the game so let&rsquo;s set the winner variable equal to false.</p>

<p>To follow the logic we just put down let&rsquo;s create a while loop using both winner and @turn. We can continue playing the game if there is no winner and if @turn less than the amount of spaces on the board (remember @slots**2 is the number of spaces). If both of these comparisions are true then we can continue with the game. For an aethestic purpose we will need to print the board, so let&rsquo;s create a method <code>print_board</code>. To follow good programming practices leave the logic for the methods.</p>

<p>Now that the user can see the board let&rsquo;s work on the logic of the game play. If @turn is one less than the amount of spaces on the board and a winner has not yet been found then that means the game is a time. Let&rsquo;s output a string to the user that it&rsquo;s a tie and ask them if they want to play again by calling the <code>play_again</code> method. If @turn is not equal to the amoutn of spaces then we should get the player moves by calling <code>get_player_moves</code>. To finish this game play logic let&rsquo;s increase @turn by 1 before the while loop ends.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">game_play</span>
</span><span class='line'>    <span class="c1">#set turns equal to 0</span>
</span><span class='line'>    <span class="vi">@turn</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="c1">#will need to check for winner in this method to ensure it does not contiue playing</span>
</span><span class='line'>    <span class="n">winner</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="c1">#if winner is false and turns are less than slots?</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">winner</span> <span class="o">==</span> <span class="kp">false</span> <span class="o">&amp;&amp;</span> <span class="vi">@turn</span> <span class="o">&lt;</span> <span class="vi">@slots</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'>      <span class="n">print_board</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@turn</span> <span class="o">==</span> <span class="p">(</span><span class="vi">@slots</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="c1">#else if turns are equal to slots and no winner then draw</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;It&#39;s a tie!&quot;</span>
</span><span class='line'>        <span class="n">play_again</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1">#get the player move</span>
</span><span class='line'>        <span class="n">get_player_moves</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1">#turns will need to be increased somewhere</span>
</span><span class='line'>      <span class="vi">@turn</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we move onto the the player move logic let&rsquo;s work on these two new methods <code>print_board</code> and <code>play_again</code>. The board printing method is formulating a large string for the user to see. Let&rsquo;s begin by making the board variable equal to @board.in_groups_of(@slots). If you remember from the <code>design_board</code> method earlier @board is an array from 1 to however many total spaces there are; using in_groups_of will divide that total number of spaces by the amount of slots. For instance if the number of @slots is 3 then @board is [1, 2, 3, 4, 5, 6, 7, 8, 9]. If you divide 9 by 3 then there will be 3 equal groups of 3 making board a multi-dimensional array, [[1, 2, 3],[4, 5, 6],[7, 8, 9]].</p>

<p>We&rsquo;ll make printed_board equal to two new lines and then go through each value of the board arrays and add those values to that printed_board variable. Lastly to keep things neat we&rsquo;ll add an additional two new lines to printed_board and return that variable. This means each time the printed_board method is called then this board will print to the terminal.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">print_board</span>
</span><span class='line'>    <span class="n">board</span> <span class="o">=</span> <span class="vi">@board</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="vi">@slots</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printed_board</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">board</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">row</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="o">|</span>
</span><span class='line'>        <span class="c1">#designing the actual board</span>
</span><span class='line'>        <span class="n">printed_board</span> <span class="o">+=</span> <span class="n">char</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="vi">@slots</span><span class="o">**</span><span class="mi">2</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">printed_board</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">printed_board</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>play_again</code> method is very simple. We&rsquo;ll first ask if the user wants to play again and chomp that response. If the user answers &lsquo;y&rsquo; then a new game is created and the user can play again. If they don&rsquo;t answer &lsquo;y&rsquo; then the script is exited.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">play_again</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Play again? y/n&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;y&quot;</span> <span class="p">?</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span> <span class="p">:</span> <span class="nb">exit</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that our two side methods are finished let&rsquo;s move onto the <code>get_player_moves</code> method. We want to show who is currently moving so let&rsquo;s print that to the screen using the about of turns%2 + 1. The modulo division gives the remainder of an integer division which shows &ldquo;Player 1&rdquo; or &ldquo;Player 2&rdquo;. Depending on the @turn variable we decide who moves and pass along the type of mark, &lsquo;X&rsquo; or &lsquo;O&rsquo;. After the players have moved we check if someone has won in <code>winner_check</code>. For the sake of continuity let&rsquo;s work on the player moves in the next section.</p>

<figure class='code'><figcaption><span>[game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">get_player_moves</span>
</span><span class='line'>    <span class="c1">#players move after each other</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Player </span><span class="si">#{</span><span class="p">(</span><span class="vi">@turn</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1">#ie. if player1 moves then player2 will move</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@turn</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vi">@player1</span><span class="o">.</span><span class="n">play_move</span><span class="p">(</span><span class="s2">&quot;X&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@player2</span><span class="o">.</span><span class="n">play_move</span><span class="p">(</span><span class="s2">&quot;O&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#check if someone has won</span>
</span><span class='line'>    <span class="n">winner_check</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Playah! Playah!</h2>

<p>As you saw in the previous code block the <code>play_move</code> method is used in both the Player and Computer classes. We&rsquo;ll work with the Player class, let&rsquo;s initialize it with @game =  game. If you notice in the Game class when a player was initialize we passed along the current game using &lsquo;self&rsquo;.</p>

<p>Let&rsquo;s work on that <code>play_move</code> method, the argument is mark and takes in that &lsquo;X&rsquo; or &lsquo;O&rsquo; passed along from when it&rsquo;s called in the Game class. We ask the user where they would like to move and pass that and the @game.board along to the <code>slot_play</code> method.  The return of the <code>slot_play</code> method returns the space number if it is correct. We then set that space number on the @game.board to the &lsquo;X&rsquo; or &lsquo;O&rsquo; mark.</p>

<p>Before the codeblock let&rsquo;s go over the <code>slot_play</code> method, as seen in the <code>play_move</code> it takes in the current game board. We make a variable slot equal to that string we received from the user which has been converted into an integer. If slot is not between the range of the board spaces then the the user needs to input a number again. If the slot is between that board range but another play currently has a mark there then it asks the player to input another number. Finally, if the user has done things correctly then slot is decreased by 1.</p>

<figure class='code'><figcaption><span>[Player.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@game</span> <span class="o">=</span> <span class="n">game</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_move</span><span class="p">(</span><span class="n">mark</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Where would you like to move?&quot;</span>
</span><span class='line'>    <span class="c1">#need to get the board index that includes that number</span>
</span><span class='line'>    <span class="n">slot</span> <span class="o">=</span> <span class="n">slot_play</span><span class="p">(</span><span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="n">slot</span><span class="o">]</span> <span class="o">=</span> <span class="n">mark</span>
</span><span class='line'>    <span class="c1">#another method?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">slot_play</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#needs to get the slot into a number</span>
</span><span class='line'>    <span class="n">slot</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="c1"># if number is greater than the amount of slots </span>
</span><span class='line'>    <span class="k">while</span> <span class="n">slot</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">slot</span> <span class="o">&gt;</span> <span class="vi">@game</span><span class="o">.</span><span class="n">slots</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'>      <span class="c1">#return invalid input</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Invalid game slot. Try again&quot;</span>
</span><span class='line'>      <span class="n">slot</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#if number is taken</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="n">slot</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#return taken</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Someone is there. Try again&quot;</span>
</span><span class='line'>      <span class="n">slot</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#redo</span>
</span><span class='line'>    <span class="n">slot</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>I For One Welcome Our Computer Overlords</h2>

<p>Let&rsquo;s move on to the Computer class and the logic behind that. Like the Player class when the Computer class is initialized it takes in the current game. Like the <code>play_move</code> method in Player thi one will take in the mark &lsquo;X&rsquo; or &lsquo;O&rsquo;. We let the human know that the computer is moving, we add an aethestic quality of a sleep command of two seconds to it appears the computer is thinking. We make move equal to the return of the <code>mark_move</code> method and on that sspace number on the game board we put the mark.</p>

<p>The <code>mark_move</code> method is pure logic, although this program does not let the Computer just randomly pick a spot this is a simple slot selection process. Generally, the user will pick the @slot number as 3 so I used the logic based on that. The smartest move the computer can do is use the center of the board, if another mark is there then it moves to the next if clause. The next four if clauses test if a mark is in one of the fours corners of the board. From there we figured out if a mark is in the other slots of the 3 group board. If it still fails the previous if clauses then the computer will choose a random spot.</p>

<figure class='code'><figcaption><span>[Computer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@game</span> <span class="o">=</span> <span class="n">game</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_move</span><span class="p">(</span><span class="n">mark</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#take the symbol &quot;x&quot; or &quot;o&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;The computer is moving...&quot;</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">move</span> <span class="o">=</span> <span class="n">mark_move</span>
</span><span class='line'>    <span class="c1">#the index of the game board gets that mark</span>
</span><span class='line'>    <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="n">move</span><span class="o">]</span> <span class="o">=</span> <span class="n">mark</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mark_move</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">4</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">4</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="o">!</span><span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">5</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">8</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">8</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">6</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">6</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="o">!</span><span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">2</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">3</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">5</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">5</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">7</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">7</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@game</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">sample</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Checking Who&rsquo;s The Big Pumba</h2>

<p>We&rsquo;ve just finished the Player and Computer classes! Tired yet? We&rsquo;re almost done. In the Game class we left off with the <code>winner_check</code> method, so let&rsquo;s create that. The <code>winner_check</code> method will access the methods that will test if there is a winner, if there is then the script will announce a winner and ask if the user wants to play again.</p>

<p>There are three possible winning situations, a horizontal line, a vertical column, or a diagonal. I have a concise explanation on my <a href="">script&rsquo;s README</a> that describes the winning situations but let me go over these methods as I go over each one.</p>

<figure class='code'><figcaption><span>[Game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">winner_check</span>
</span><span class='line'>    <span class="c1">#since there are no hard-coded wins there should be a line/column/diagonal win</span>
</span><span class='line'>    <span class="n">board</span> <span class="o">=</span> <span class="vi">@board</span><span class="o">.</span><span class="n">in_groups_of</span><span class="p">(</span><span class="n">slots</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#need to keep track of the players points</span>
</span><span class='line'>    <span class="vi">@point</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">line</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">||</span> <span class="n">column</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">||</span> <span class="n">diagonal</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@winner</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Player </span><span class="si">#{</span><span class="p">(</span><span class="vi">@turn</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2"> wins!&quot;</span>
</span><span class='line'>      <span class="n">play_again</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>line</code> method takes in the current game&rsquo;s board. We will go through each array of the board. Testing the values of each array in the second dimension, each time the same value is found then a point is added. We then call the <code>points</code> method which I will go over at the very end, if there are enough points then the <code>line</code> method returns true and a winner is announced. If there are not enough points then the method returns false and we move on to the <code>column</code> method.</p>

<figure class='code'><figcaption><span>[Game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">line</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@slots</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">(</span><span class="vi">@slots</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>        <span class="c1">#if one slot is equal to the slot to the right add point</span>
</span><span class='line'>        <span class="vi">@point</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="n">board</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">points</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>column</code> method takes in the current game&rsquo;s board. We will go through each array of the board. Testing the values of the board where the second array value is equal to another value in that same second array value. Each time the same value is found then a point is added. We then call the <code>points</code> method which I will go over at the very end, if there are enough points then the <code>column</code> method returns true and a winner is announced. If there are not enough points then the method returns false and we move on to the <code>diagonal</code> method.</p>

<figure class='code'><figcaption><span>[Game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">column</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#going through each slot</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@slots</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="c1">#going through each slot</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">(</span><span class="vi">@slots</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>        <span class="c1">#if one slot is equal to the slot below it add point</span>
</span><span class='line'>        <span class="vi">@point</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="n">board</span><span class="o">[</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">x</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">points</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>column</code> method takes in the current game&rsquo;s board. We will go through each array of the board. First, if the values are equal to each other in a downward right fashion then a point is added. <code>Points</code> is then called and may or may not return true. If it does not return true then we check if the values are equal to each other in a downward left fashion then a point is added. <code>Points</code> is then called and may or may not return true. In this case if <code>points</code> returns false then the <code>check_winner</code> method also returns false.</p>

<figure class='code'><figcaption><span>[Game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">diagonal</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">(</span><span class="vi">@slots</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="c1">#if board slot is equal going in downward right fashion</span>
</span><span class='line'>      <span class="vi">@point</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">points</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">(</span><span class="vi">@slots</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="c1">#diagonal board slot is equal going in downward left fashion</span>
</span><span class='line'>      <span class="vi">@point</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="vi">@slots</span><span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">board</span><span class="o">[</span><span class="vi">@slots</span><span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">][</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">points</span> <span class="o">==</span> <span class="kp">true</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>points</code> method compares the @point variable to the @slots variable. If they are not equal then @point returns to 1.</p>

<figure class='code'><figcaption><span>[Game.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">points</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@point</span> <span class="o">==</span> <span class="vi">@slots</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@point</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is the completion of the Tic Tac Toe Ruby script! For the future I&rsquo;m going to setup a difficulty setting for the computer, where beginner let&rsquo;s the Computer randomnly select a board space, medium selects the board space using the current logic, and extreme selects the board space depending on both the computer and the human player. I hope this walkthrough aids you in creating your own Tic Tac Toe Ruby script and that you enjoy playing this one.</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading Javascript or HTML to Scala Content Manager]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2015/01/14/uploading-javascript-or-html-to-content-manager/"/>
    <updated>2015-01-14T12:09:49-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2015/01/14/uploading-javascript-or-html-to-content-manager</id>
    <content type="html"><![CDATA[<p>Step by step of uploading your Javascript or HTML files to the Scala Content Manager.</p>

<!--more-->


<p>To upload files like Javascript or HTML to the Scala Content Mangar you must create a widget. To do this your must put all your files into one folder as such</p>

<p><img src="http://ChristinaLeuci.github.io/images/widget/widget.jpg"/></p>

<p>Once these files are all under the main folder you can then compress that folder, this creates a <span style="italics">.zip</span> file. Change the file extension to <span style="italics">.wgt</span>. Once this is done you can upload your widget to the Scala Content Manager.</p>

<p>This file can then be uploaded to a player like an Intel Nook.</p>

<p>Keep on being bad ass!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Arrays to Your Rails Database]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/22/add-arrays-to-your-rails-database/"/>
    <updated>2014-12-22T13:38:32-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/22/add-arrays-to-your-rails-database</id>
    <content type="html"><![CDATA[<p>Have you ever been looking at your database wondering how you can change that string or integer into an array or a hash?</p>

<!--more-->


<p>Before we start with the code make sure you have a database and it&rsquo;s model created in your Rails app.</p>

<p>I currently have it setup so that my Wardrobe is initiaized upon a User&rsquo;s creation. For a usual serialization you will only need two lines of code and optionally a method.</p>

<figure class='code'><figcaption><span>[wardrobe.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Wardrobe</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>    <span class="n">serialize</span> <span class="ss">:wardrobe</span>
</span><span class='line'>    <span class="n">after_create</span> <span class="ss">:serialize_wardrobe</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">serialize_wardrobe</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">wardrobe</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:tops</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span> <span class="ss">:bottoms</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">}</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used the serialize method that you can research more about <a href="http://apidock.com/rails/ActiveRecord/Base/serialize/class">here</a>. As a note although my class&rsquo;s name is Wardrobe I also have a param underneath that named wardrobe. You should use the param name you want to be serialized.</p>

<p>After serializing the wardrobe, which happens upon initialization, I decided to specify what would be inside that serialized wardrobe param by using an <span style="font-style: italics">after_create</span> method. Inside my after_create method I described that the wardrobe param hash should contain two keys with their respective arrays and it should be saved.</p>

<p>That&rsquo;s it! Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AWS Image Hosting for Rails]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/19/setting-up-aws-with-your-rails-app/"/>
    <updated>2014-12-19T12:17:11-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/19/setting-up-aws-with-your-rails-app</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using only a couple of photos with your Rails application then it&rsquo;s pretty simple. If you&rsquo;re going to be using hundreds of thousands of photos you&rsquo;ll need a hosting site like Amazon S3.</p>

<!--more-->


<h2>Step 1 &ndash; Have An Account</h2>

<p>If you don&rsquo;t have an account with Amazon&rsquo;s S3 hosting service this step is for you. If you already have an account already please go to <span style="font-style: italics"> Step 2 </a>. Fortunately <a href="http://aws.amazon.com/s3/">Amazon</a>&rsquo;s hosting services are free for the first 12-months. You will need to sign up for an account with your Amazon email and password. And that&rsquo;s it you&rsquo;re finished! You can now start integrating your Amazon S3 console with buckets and files. <span style="font-style: italics">A word to the wise: if you&rsquo;re new to Amazon S3 you should manually create a bucket inside your Amazon S3 account before accessing the AWS Client!</span></p>

<h2>Step 3 &ndash; Create A Pretty Access Key</h2>

<p>As with any API you will need an account access key and an account password. You will be able to access your Security Credentials by going to the nav bar on the top and clicking either on your name or &ldquo;My Account&rdquo; depending on what page you&rsquo;re on and selecting Security Credentials. Click &ldquo;Create New Key Access&rdquo;, this will show both your new access key and secret. You should download the Key and Secret file since your secret will no longer be available after you close the pop-up.</p>

<p>Awesome, now you have your access key and secret! Almost done!</p>

<h2>Step 2 &ndash; Client Interface Dawg</h2>

<p>After much trial and error I found the best approach to accessing Amazon S3 was to download the <a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">AWS Client Line Interface</a> and the add a Bucket Policy Editor to the bucket&rsquo;s properties. The AWS CLI has two installations options which covers Windows, Unix, and Unix clone systems and it&rsquo;s pretty straight forward. Once that is installed you will need to type &ldquo;aws configure&rdquo; in your terminal while you are inside your application&rsquo;s main folder. I&rsquo;m using Mac OSx so it may be alittle different for Windows based systems. This will prompt you for your access key, secret, region, and output format. I have found that the region and output format are not all too important for simple calls to the hosting site.</p>

<h2>Step 3 &ndash; Super Cool Policy Creator</h2>

<p>At this point your application now recognizes that AWS key and secret with it&rsquo;s config file. What you will now need to do is change the S3&rsquo;s bucket policy. By going into your Amazon S3 console and clicking on your bucket, the right side options <span style="font-style: italics">Properties</span> should light up. Click on this and click again on <span style="font-style: italics">Permissions</span>. Here you can see who has access to this bucket, if you haven&rsquo;t changed anything you should see only your username with all the following radio boxes checked.</p>

<p>Right underneath your name is a button called <span style="font-style:italics">Edit Bucket Policy</span>, click that. Here you can describe what actions people accessing your bucket will be able to perform. You can choose to use the <span style="font-style:italics">AWS Policy Generator</span> button but I have found that process to be convoluted and it ended up not giving me the policy I wanted.</p>

<p>Since this Bucket will only be used for the Curate Analytics site and no one else has access to the access key and secret I thought it best to allow all actions by placing a &ldquo;*&rdquo; for the AWS and Action lines. I may change this in the future but feel free to play around with actions. These Amazon S3 <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">docs</a> are really great.</p>

<p>Don&rsquo;t forget to add YOUR bucketname down there!</p>

<figure class='code'><figcaption><span>[AWS Bucket Policy] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "Version": "2008-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>      {
</span><span class='line'>        "Sid": "Stmt1418573913031",
</span><span class='line'>        "Effect": "Allow",
</span><span class='line'>        "Principal": {
</span><span class='line'>          "AWS": "*"
</span><span class='line'>        },
</span><span class='line'>        "Action": "s3:*",
</span><span class='line'>        "Resource": "arn:aws:s3:::&lt;bucket name>/*"
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>Step 4 &ndash; All About That Code</h2>

<p>You can finally start adding code to your Rails app. Inside the models you want the bucket to be accessed through you can write this line of code</p>

<figure class='code'><figcaption><span>[AWS Access Code] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s3 = AWS::S3.new
</span><span class='line'>    bucket = s3.buckets['&lt;bucket name>']
</span><span class='line'>    bucket.objects.each do |obj|
</span><span class='line'>      if obj =~ /swipe batches/i && obj =~ /jpg/i
</span><span class='line'>        self.sort_objs(obj.key)
</span><span class='line'>      end
</span><span class='line'>    end</span></code></pre></td></tr></table></div></figure>


<p>Like with any class you&rsquo;ve initialized a new connection to the Amazon S3. Since your AWS account keys and secrets are hooked to this application&rsquo;s config you can call your S3 bucket.</p>

<p>Here I&rsquo;ve gone through each obj which will start with the top folders and travel down to the actual file. An example of some json feed would be <span style="font-style: italics">tops, tops/collars, tops/collar/image.jpg</span> It&rsquo;s a big of a hassle but you should be able to use regex like I used above to find all files with a certai word in it. The objects in the json feed are a little odd but this works for my purposes, you&rsquo;ll need to play around with loops and functions to see what works for your bucket.</p>

<p>And you should have access to your S3 bucket and images inside it.</p>

<p>Keep on being badass programmers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up an API on an Existing Rails Application]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/18/setting-up-an-api-on-an-existing-rails-application/"/>
    <updated>2014-12-18T12:48:34-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/18/setting-up-an-api-on-an-existing-rails-application</id>
    <content type="html"><![CDATA[<p>Hey y&#8217;all it&rsquo;s been a long time! Life has been a bit busy at the moment and I&rsquo;ll write a blog all about that in the non-technical session ASAP.</p>

<!--more-->


<p>Today I&rsquo;m going to talk about setting up your current Rails application with an API. This is assuming that you have a working Rails application, preferably with data to see in the browser when you have it up and running through the rails server.</p>

<h2>The Pre-Coding Code</h2>

<p>So before we do any serious setup the first thing we will need to do is access the rails-api gem. To do this put this line inside your Gemfile file</p>

<figure class='code'><figcaption><span>[Gemfile] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails-api' , require: 'rails-api/action_controller/api'</span></code></pre></td></tr></table></div></figure>


<p>and bundle install.</p>

<h2>Ain&rsquo;t No Basic Controller</h2>

<p>At this point you will have access to the API Action Controller which I suggest you read up on in the <a href="http://api.rubyonrails.org/">Ruby on Rails API docs</a>. So now that your application is ready for API goodness you&rsquo;ll want to create a sub-folder underneath your <span font-style="italics">app/controllers</span> titled <span style="font-weight: 500"> api </a>.</p>

<p>At this point underneath <span font-style="italics">app/controllers</span> you should have your main controllers, ie. application_controller or user_controller, and your <span font-style="italics">api</span> folder.</p>

<p>Now inside this api folder you will want to add an <span font-style="italics">api_controller.rb</span> file and an optional <span font-style="italics">v1</span> folder.</p>

<p>The <span font-style="italics">api_controller.rb</span> will be your API controller, this is essentially the application controller for your API. Inside your api_controller you will want to set it up similarly to the application_controller <figure class='code'><figcaption><span>[api_controller.rb] </span></figcaption></p>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">ApiController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div>


<p></figure></p>

<p>As you can see we are no longer using the Base Action Controller, instead we&rsquo;re using the API Action Controller. This will be one of the sub controllers that will inherit from the Base Action Controller. If in the future you want to implement an API sign in option with a username and secret as many api&rsquo;s have now-a-days this if the file you would do this in.</p>

<p>At this point you should have the <span font-style="italics">api_controller.rb</span> setup and hopefully, but not required, the <span font-style="italics">v1</span> folder setup.</p>

<p>I suggest implement the <span font-style="italics">v1</span> folder incase you decide to create multiple versions of the api in the future.</p>

<p>So let&rsquo;s say you have the <span font-style="italics">v1</span> setup. Inside this folder you will have all of the controllers you&rsquo;re find in the main controllers folder. Currently I am using an api user_controller to allow api users to access the users in the system.</p>

<h2>Get The Data You Want</h2>

<p>Inside the <span font-style="italics">user_controller.rb</span> you will want to set it up depending on which information you want to be shown. Let&rsquo;s say that your application user_controller has both index and show methods, this will mean your API user_controller will also have index and show methods.</p>

<figure class='code'><figcaption><span>[api/v1/user_controller.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">UserController</span> <span class="o">&lt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">ApiController</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">MimeResponds</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@users</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@user</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I have set it up so that when the api user goes to <span font-style="italics">example.com/api/v1/users.json</span> they will see all the users in the database. As you can see I put &ldquo;.json&rdquo; at the end of the html address, this is because inside the api user_controller I specified the format I want to respond to. I you wanted the api to respond to an xml call then you would put</p>

<figure class='code'><figcaption><span>[user_controller.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span><span class="n">render</span> <span class="ss">xml</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> or even allowing access to both json and xml calls</p>

<p> <figure class='code'><figcaption><span>[user_controller.rb] </span></figcaption></p>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>    <span class="k">if</span> <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span><span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span><span class="n">render</span> <span class="ss">xml</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div>


<p></figure></p>

<p> I setup the user.show api call similarly. When an api user calls <span font-style="italics">example.com/api/v1/users/1.json</span> this will show that specific user&rsquo;s data.</p>

<h2>Almost Done</h2>

<p>Awesome, you&rsquo;re almost done. Just like any other controller you will need to set up the routes.</p>

<figure class='code'><figcaption><span>[config/routes.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">resources</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">resources</span> <span class="ss">:other_controllers</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to organize my api groups of controllers under a namespace and again under a v1 namespace. This allows me to organize my routes instead of searching for them through the document. Optionally I chose to make my <span font-style="italics">api/user_controller.rb</span> also a namespace. This requires me to access my other api controllers based on the user api controller.</p>

<p>And that&rsquo;s it! Keep on being badass! &lt;3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tictactoe in Ruby]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/11/03/tictactoe-in-ruby/"/>
    <updated>2014-11-03T14:20:03-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/11/03/tictactoe-in-ruby</id>
    <content type="html"><![CDATA[<p>This is a really quick Ruby tictactoe program that really feels like it&rsquo;s playing against you.</p>

<!--more-->


<p>I created this a couple of months ago so it may not be the most optimized it can be but it works which is the important thing. What you must first do is define the parameters of the board</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#all the different slots that you can play
</span><span class='line'>@slots = { 
</span><span class='line'>  "a1"=>" ","a2"=>" ","a3"=>" ",
</span><span class='line'>  "b1"=>" ","b2"=>" ","b3"=>" ",
</span><span class='line'>  "c1"=>" ","c2"=>" ","c3"=>" "
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#all 8 winning matches
</span><span class='line'>@winning = [ 
</span><span class='line'>  ['a1', 'a2', 'a3'],
</span><span class='line'>  ['b1', 'b2', 'b3'],
</span><span class='line'>  ['c1', 'c2', 'c3'],
</span><span class='line'>  ['a1', 'b1', 'c1'],
</span><span class='line'>  ['a2', 'b2', 'c2'],
</span><span class='line'>  ['a3', 'b3', 'c3'],
</span><span class='line'>  ['a1', 'b2', 'c3'],
</span><span class='line'>  ['c1', 'b2', 'a3']
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>The next thing you need to do is initialize the players, you and the computer. In the method below we define the computer&rsquo;s name as Computer and prints out the lines before taking in a user&rsquo;s name.</p>

<figure class='code'><figcaption><span>tictactoe.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># player names; introduction</span>
</span><span class='line'><span class="vi">@comp_name</span> <span class="o">=</span> <span class="s2">&quot;Computer&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;TIC TAC TOE&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Player, what is your name?&quot;</span>
</span><span class='line'><span class="no">STDOUT</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="vi">@player_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we must now decide is who&rsquo;s turn it will be. I decided to create some logic that randomnly selects who will go first.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># determine who is X or O
</span><span class='line'># use .5 because only 2 options [x or o]
</span><span class='line'>@comp = rand() > 0.5 ? 'X' : 'O'
</span><span class='line'>@player = @comp == 'X' ? 'O' : 'X'
</span><span class='line'>
</span><span class='line'>#actually initiating the methods
</span><span class='line'> if(@player == 'X')
</span><span class='line'>  puts ''
</span><span class='line'>  puts "#{@player_name} has the first turn"
</span><span class='line'>  player_turn
</span><span class='line'>else
</span><span class='line'>  puts ''
</span><span class='line'>  puts "#{@comp_name} has the first turn"
</span><span class='line'>  comp_turn
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>At this point we have defined the parameters of the game, who the players are, and who will go first. What we must do now is draw the game and figure out the logic that allows the computer to be a worthy opponent. Let&rsquo;s start with an easy method to draw the board.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#draw game method shows slots, empty and full
</span><span class='line'>def draw_game
</span><span class='line'>  puts "-----------------------------------------------------------------------------"
</span><span class='line'>
</span><span class='line'>  puts "TIC TAC TOE"
</span><span class='line'>  puts "#{@comp_name}: #{@comp}"
</span><span class='line'>  puts "#{@player_name}: #{@player}"
</span><span class='line'>  puts ""
</span><span class='line'>  puts "   a   b   c"
</span><span class='line'>  puts ""
</span><span class='line'>  puts " 1 #{@slots["a1"]} | #{@slots["b1"]} | #{@slots["c1"]}"
</span><span class='line'>  puts "   ---------"
</span><span class='line'>  puts " 2 #{@slots["a2"]} | #{@slots["b2"]} | #{@slots["c2"]}"
</span><span class='line'>  puts "   ---------"
</span><span class='line'>  puts " 3 #{@slots["a3"]} | #{@slots["b3"]} | #{@slots["c3"]}"
</span><span class='line'>  puts ""
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>What this will print out is a board that contains the slot names ie. &ldquo;a1&hellip;a2&rdquo; in their slots. At this point we can start dealing with the more complicated logic. Let&rsquo;s begin by starting with the two methods we defined earlier when we figured out which player would go first.</p>

<p>Let&rsquo;s walk through the player_turn method. It begins by drawing the game and then asks the player to make a move by typing in a slot. Inside the method we check if the slot the user inputted is legitimate. If it&rsquo;s not we call the wrong_move or wrong_input method&rsquo;s but we&rsquo;ll cover that in just a second.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def player_turn
</span><span class='line'>  puts ""
</span><span class='line'>  draw_game
</span><span class='line'>  puts "#{@player_name}, please make a move or type 'exit' to quit"
</span><span class='line'>  STDOUT.flush
</span><span class='line'>  input = gets.chomp.downcase
</span><span class='line'>  if input.length == 2
</span><span class='line'>    a = input.split("")
</span><span class='line'>    if(['a','b','c'].include? a[0])
</span><span class='line'>      if(['1','2','3'].include? a[1])
</span><span class='line'>        if @slots[input] == " "
</span><span class='line'>          @slots[input] = @player
</span><span class='line'>          puts ""
</span><span class='line'>          puts "#{@player_name} marks #{input.upcase}"
</span><span class='line'>      #puts times.times_in_column
</span><span class='line'>          check_game(@comp)
</span><span class='line'>        else
</span><span class='line'>          wrong_move
</span><span class='line'>        end
</span><span class='line'>      else
</span><span class='line'>        wrong_input
</span><span class='line'>      end
</span><span class='line'>    else
</span><span class='line'>      wrong_input
</span><span class='line'>    end
</span><span class='line'>  else
</span><span class='line'>    wrong_input unless input == 'exit'
</span><span class='line'>  end
</span><span class='line'> end</span></code></pre></td></tr></table></div></figure>


<p>The wrong_move and wrong_input methods are very simple. If the input the user gives is wrong then the program prints out that the player inputed the wrong string. It calls the player_turn method again for the player to pick another turn.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def wrong_move
</span><span class='line'>  puts ""
</span><span class='line'>  puts "You must choose an empty slot"
</span><span class='line'>  player_turn
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def wrong_input
</span><span class='line'>  puts ""
</span><span class='line'>  puts "Please specify a move with the format 'A3' , 'B1' , 'C2' etc."
</span><span class='line'>  player_turn
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>If we walk through the code at this point as a player we find ourselves at the check_game method. This is a main method in our program so let&rsquo;s take a break from the player path and delve more into the computer path so we can find ourselves again at the check_game method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def comp_turn
</span><span class='line'>  move = comp_find_move
</span><span class='line'>  @slots[move] = @comp
</span><span class='line'>  puts ""
</span><span class='line'>  puts "#{@comp_name} marks #{move.upcase}"
</span><span class='line'>  check_game(@player)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>The first method we encounter here is the comp_find_move method. This will decide the next move that the computer will take before we check the game for a winner or loser. Let&rsquo;s go over the comp_find_move method now to go over the logic involved in the computer finding it&rsquo;s next move.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def comp_find_move
</span><span class='line'>  #choosing best comp choice 2 in column
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @comp) == 2
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  #defending against the player first
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @player) == 2
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  #third best comp choice only one in column
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @comp) == 1
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  #choosing an empty slot
</span><span class='line'>  k = @slots.keys;
</span><span class='line'>  j = rand(k.length)
</span><span class='line'>  if @slots[k[j]] == " "
</span><span class='line'>    return k[j]
</span><span class='line'>  else
</span><span class='line'>    #first empty slot
</span><span class='line'>    @slots.each { |k,m| return k if m == " " }
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This method figures out the best moves the computer can make to make sure it beats the player. The first if clause chooses a slot if the computer already has two slots in a line. The next if clause chooses a slot to defend against the player. The last if clause chooses a slot if the computer already has one slot in a row on the board. If all these if clauses have failed then the computer chooses an empty slot.</p>

<p>Let&rsquo;s go over the times_in_column and empty_in_column methods before we go over the check_game method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def times_in_column arr, item
</span><span class='line'>  times = 0
</span><span class='line'> #arr.each do |i|
</span><span class='line'> for i in [arr] do
</span><span class='line'>    if @slots[i] != " "
</span><span class='line'>    times += 1
</span><span class='line'>    unless @slots[i] == item || @slots[i] == " "
</span><span class='line'>      return 0
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  return times
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def empty_in_column arr
</span><span class='line'>  arr.each do |i|
</span><span class='line'>    if @slots[i] == " "
</span><span class='line'>      return i
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>These two methods are very simple. The times_in_column method count the slots that are in a column. So if there were three slots in a column it would return three. Similarly the empty_in_column method returns if there is an empty space in that column.</p>

<p>At this point we&rsquo;ve handled all the minor methods, we have one more method to go, the check_game method. This will essentially tell us if there is a winner, a tie, or if the game needs to continue.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#checking winnings or loses or continuings
</span><span class='line'>def check_game(next_turn)
</span><span class='line'>  game_over = false
</span><span class='line'>  #@winnings.each do |column|
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    #comp has won?
</span><span class='line'>    if times_in_column(column, @comp) == 3 #three in a row
</span><span class='line'>    puts ""
</span><span class='line'>      puts "Game Over Dude, the Computer won!!!"
</span><span class='line'>      game_over = true
</span><span class='line'>    end
</span><span class='line'>  
</span><span class='line'>    #player has won?
</span><span class='line'>    if times_in_column(column, @player) == 3 #three in a row
</span><span class='line'>    puts ""
</span><span class='line'>      puts "Game Over YOU win!!!"
</span><span class='line'>      game_over = true
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  unless game_over
</span><span class='line'>    if(moves_left > 0) #no moves left
</span><span class='line'>      if(next_turn == @player) #from comp_turn method
</span><span class='line'>        player_turn
</span><span class='line'>      else
</span><span class='line'>        comp_turn #from player_turn method
</span><span class='line'>    end
</span><span class='line'>  
</span><span class='line'>    else
</span><span class='line'>      puts ""
</span><span class='line'>      puts "Game Over -- DRAW!"
</span><span class='line'>    game_over = true
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This method begins by setting a game_over value to false. In the first if loop we figure out if the computer has three slots in a row, if that&rsquo;s true the program outputs that the computer has won and the program stops. If the player has three slots in a row then the program outputs that the player has won and the program stops.</p>

<p>The final if statement checks to make sure that there are no more moves left. If there are more moves left then it figures out who has the next move. If there are no more moves left it outputs that the game has ended in a draw and the program stops.</p>

<p>If you haven&rsquo;t noticed we have one small problem, we still need to define the moves_left method. This last piece completes the program. This method goes through the board to see if there is another slot open for a move to be completed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def moves_left
</span><span class='line'>  slots = 0
</span><span class='line'>  @slots.each do |k, v|
</span><span class='line'>    slots += 1 if v == " "
</span><span class='line'>  end
</span><span class='line'>  slots
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>As with any good program there are always ways to optimize the code, let me know what you think of the code. Keep on being badass!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Comments to a Octopress Blog]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/10/28/add-comments-to-your-blog/"/>
    <updated>2014-10-28T23:14:56-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/10/28/add-comments-to-your-blog</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to add comments to you github pages blog? It will take a quick two minutes and you&rsquo;ll be ready for feedback!</p>

<!--more-->


<p>Today we&rsquo;ll be using <a href="http://disqus.com">Disqus</a>, this is something that&rsquo;s already implemented in the current update of Octopress. The first thing you&rsquo;ll need to do is signup for a Disqus account. If you already have an account you can skip down to <span style="font-weight: 500">Step 2</span>.</p>

<h2>Step 1</h2>

<p>Once you&rsquo;ve signed up for your Disqus account go to the icon at the top right of your page. In the drop down menu click on the My Home button.</p>

<p><img src="http://ChristinaLeuci.github.io/images/disqus/start.png" width="90%"/></p>

<h2>Step 2</h2>

<p>At this point you will have come to your Disqus homepage, for your purposes of using Disqus as a comment feed you won&rsquo;t need the homepage much. If you go again to the top right of the screen and click on the gear it will show you another drop down menu. In this menu click on the Add Disqus to Site button.</p>

<p><img src="http://ChristinaLeuci.github.io/images/disqus/homemenu.png"/></p>

<h2>Step 3</h2>

<p>Fill out the form like so:
<img src="http://ChristinaLeuci.github.io/images/disqus/siteprofile.png" width="90%"/></p>

<p>Make sure that when you choose your Unique Disqus URL you are sure of it. So far Disqus has not given user&rsquo;s the option of changing it.</p>

<h2>Step 4</h2>

<p>At this point in the game you can actually start working with your blog&rsquo;s source code. If you&rsquo;re up to date with Octopress you should already have the call to the Disqus partial inside your <span style="font-weight: 500">_layouts/post.html</span> partial.</p>

<p>The only thing you will need to change is inside the _includes/disqus.html partial. On line 4 you will need to put your unique short name for the site. If you can&rsquo;t remember it go to the admin page of your Disqus account, choose the unique site, and select the <span style="font-weight: 500">Settings</span> tab.</p>

<figure class='code'><figcaption><span>[disqus.html] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="cm">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">disqus_shortname</span> <span class="o">=</span> <span class="s1">&#39;YOUR_SHORTNAME_HERE&#39;</span><span class="p">;</span> <span class="c1">// required: replace example with your forum shortname</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* * * DON&#39;T EDIT BELOW THIS LINE * * */</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;//&#39;</span> <span class="o">+</span> <span class="nx">disqus_shortname</span> <span class="o">+</span> <span class="s1">&#39;.disqus.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you deploy your Octopress blog there will now be a comment section at the end of your blog posts. Keep on being badass!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technical Interviews, Oh My!]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/09/22/technical-interviews/"/>
    <updated>2014-09-22T09:21:02-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/09/22/technical-interviews</id>
    <content type="html"><![CDATA[<p>&ldquo;Repeat, Clarify, make examples, pseudo-code, code, and finally run it&rdquo;&hellip;</p>

<!--more-->


<p>That is what my mentor, Max, from Stack Exchange has told me time and again to succeed in technical interviews. This is actually useful in any situation in life where you must prove your worth.</p>

<p>Many times an employer will give you a general question, check to see if a point falls inside a box. Now this may seem like a very simple question, just draw a box and see if the point falls inside those parameters; sadly it’s a little more complicated. One of the first things you should do is repeat the question to make sure you have haven’t missed anything. Many times you may mis-hear the employer and do something completely different than what you were expected to.
Clarify by checking to see if you’re taking in user data, and if you need to check to see if that data is correct. Another good question would be to check if “a point inside a box” means that the point falls on a box’s line or literally inside the lines. Lastly, another good question is if the box follows a simple x&amp;y graph. It’s really helpful to write down these tidbits of information. By clarifying with your interviewer you show that you’re not just a robot, you’re capable of finding the loopholes inside a problem before coding. Generally an employer is just trying to gage your intelligence and won’t make it too complicated but it’s still smart to ask these questions and not get caught clueless.
Once you’re positive of the question and what path you should follow, you should begin making examples. If we’re following the problem earlier of a point inside a box, one path you could take is drawing an x&amp;y graph with a box. A quick aside: if they are asking for user input, yes it would be simple for you to ask for each point of the box but would it be as simple for the user? NO.
In this situation the simplest group of inputs would be two diagonal points, for example let’s pick the bottom left and the top right points. This way you know the dimensions of the box by using basic math with the points.
Now that we have a diagram of the box and it’s points finished let’s move through the example. Let’s say we have the top right point as (8, 9), the bottom right point as (2, 1), and the singular point as (4,5). Your drawing should look like this:</p>

<p><img src="http://ChristinaLeuci.github.io/images/interview/box.jpg" width="90%"/></p>

<p>Now it’s obvious by your drawing that this point is inside the box, but your computer where you’ll be coding doesn’t know. What you’ll need to do is use simple math to see if this point (4,5) falls inside the dimensions of this rectangle.</p>

<figure class='code'><figcaption><span>[psuedocode.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Psuedo</span> <span class="no">Code</span>
</span><span class='line'>
</span><span class='line'><span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">top_right_x?</span>
</span><span class='line'><span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">top_right_y?</span>
</span><span class='line'><span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">bottom_right_x?</span>
</span><span class='line'><span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">bottom_right_y?</span>
</span><span class='line'>
</span><span class='line'><span class="no">Test</span> <span class="n">this</span> <span class="n">out</span> <span class="n">with</span> <span class="n">your</span> <span class="n">points!</span>
</span><span class='line'>
</span><span class='line'><span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'><span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="no">Congratulations</span> <span class="n">your</span> <span class="n">code</span> <span class="n">works</span> <span class="n">with</span> <span class="n">one</span> <span class="n">set</span> <span class="n">of</span> <span class="n">points</span><span class="o">.</span>
</span><span class='line'><span class="no">You</span> <span class="n">should</span> <span class="k">do</span> <span class="n">this</span> <span class="n">with</span> <span class="n">points</span> <span class="n">inside</span> <span class="n">the</span> <span class="n">box</span><span class="p">,</span> <span class="n">on</span> <span class="n">the</span> <span class="n">line</span><span class="p">,</span> <span class="ow">and</span> <span class="n">outside</span> <span class="n">of</span> <span class="n">the</span> <span class="n">box</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that you do solve the problem and that it gives the correct answer. What you need to do now is put it into code that can be used. If you’re using Ruby like me, then simply create a new class, that can be instantiated in your IRB and create a method that you can plug your data into.</p>

<figure class='code'><figcaption><span>[QuickInterviewProblem.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">QuickInterviewProblem</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inside?</span><span class="p">(</span><span class="n">top_right_x</span><span class="p">,</span> <span class="n">top_right_y</span><span class="p">,</span> <span class="n">bottom_left_x</span><span class="p">,</span> <span class="n">bottom_left_y</span><span class="p">,</span>
</span><span class='line'>    <span class="n">point_x</span><span class="p">,</span> <span class="n">point_y</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># let&#39;s say the user puts in (8, 9, 2, 1, 4, 5)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">top_right_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">top_right_y</span> <span class="o">&amp;&amp;</span> <span class="n">point_x</span> <span class="o">&gt;</span>
</span><span class='line'>      <span class="n">bottom_left_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&gt;</span> <span class="n">bottom_left_y</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you’re finished! Although the question may seem simple, there is a complicated process to it. At this point what you could do is, further optimize your code or run it to see if it works. If we were to optimize this could what we could do is take out the if statement. By doing something like this:</p>

<figure class='code'><figcaption><span>[QuickInterviewProblem.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">QuickInterviewProblem</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inside?</span><span class="p">(</span><span class="n">top_right_x</span><span class="p">,</span> <span class="n">top_right_y</span><span class="p">,</span> <span class="n">bottom_left_x</span><span class="p">,</span> <span class="n">bottom_left_y</span><span class="p">,</span>
</span><span class='line'>    <span class="n">point_x</span><span class="p">,</span> <span class="n">point_y</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#let&#39;s say the user puts in (8, 9, 2, 1, 4, 5)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">top_right_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">top_right_y</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">point_x</span> <span class="o">&gt;</span> <span class="n">bottom_left_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&gt;</span> <span class="n">bottom_left_y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>it shows that you can solve a simple problem while optimizing your code.
Remember to check your code. It’s impressive to interviewers if you can catch your mistakes before presenting your code. Now at this point, an interviewer will either tell you good job or they will ask if it works. If they ask you the latter the best thing you can say is “I think it does, let’s check”. This shows confidence and that you’re willing to show you’re work.
If for some crazy reason your code doesn’t work, don’t worry, continue working on it and perfect it. Just rinse and repeat, if you can understand why it’s not working then you interviewer will still be impressed.</p>

<p>Good luck to anyone who is hoping to do a technical interview! Keep on being badass!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Unexpected Adventure: My Flatiron Experience]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/09/04/an-unexpected-adventure/"/>
    <updated>2014-09-04T14:16:55-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/09/04/an-unexpected-adventure</id>
    <content type="html"><![CDATA[<p>This past summer I attended The Flatiron School in New York City for their Ruby summer intensive course.</p>

<!--more-->


<p>It was a roller coaster of emotions and learning but I wouldn’t give up those memories for anything. Through tears and laughter I have made life-long friends, found a dazzling confidence I never knew I had, and of course learned a mountain of programming material.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/FlatironBeg.png" width="90%"/></p>

<p>My first serious taste of programming and computers started during my second year of college. I took an Intro to Computer Science course and although I fell in love with programming it left me voracious for the creative side of the subject. About halfway through that course I attended a Hackathon and I felt like a complete noob (thank god my group was so understanding) but it was so worth it, I learned that I could create anything I wanted through programming. When I took a break from college I dabbled into Code Academy and online resources but they never gave me that inspiration that I had found during that Hackathon.</p>

<p>The first time I found out about Flatiron I was skeptical; they had a 100% job-placement rate and offered so many benefits. Could it be that good? I started going to their weekly meet-ups at their Manhattan campus, which I recommend for anyone looking for some good technical information. I must have annoyed the current students with all my questions about the school and their experiences with teachers and projects, luckily they were really accepting and gracious about it. It was astounding how much students had created after only learning for a couple of weeks. They had nothing but positive things to say about the school and it was quite obvious that they weren’t blindly promoting the school. I felt completely certain in my decision to apply.</p>

<p>January was the big month that I applied. It took a couple of months to hear back from them and I was a little nervous about the response. I can remember opening that email from Adam in April, I was so nervous; when I saw that I had been approved for an interview with Adam and Avi I was ecstatic, but there was still so much to do. I had never been interviewed before and it was a new terrifying experience, but I had never wanted anything more so I signed up for the earliest interviewing time the following week.</p>

<p>The interview started with my talking with Adam about who I was and what I wanted to do with programming. I answered honestly and truly about what I wanted from the program and what I wanted to afterwards. There were a couple of questions, like where do you hope to end up after the program. I had no idea how to answer this and that seemed fine to Adam. After 15 minutes of interviewing with Adam I started interviewing with Avi, the teacher of the Ruby program, about the Ruby Tic Tac Toe program I sent in with my application. I completely knew my code and I felt comfortable answering the questions that Avi asked. There were a couple that tripped me up about where I could go with the program that I had never thought to do.</p>

<p>Within an hour I heard back from Adam that I had been accepted for the summer course. And so I started a new chapter of my life.</p>

<p>The first week of Flatiron was a soft introduction into what we would be doing and what we could expect from the course. I had completed the pre-work from the course but things were still new to me and I felt a little lost. That seemed to be a common thought among the class.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/FlatironStudents.png" width="90%"/></p>

<p>The second week started picking up and from there we were in full-coursework mode. There were times I didn’t think I could keep up or that I just couldn’t get a topic. It was really helpful for me that our class had a Feeling’s Friday. Those sessions really helped me get a notion of what everyone else was thinking and just how grateful I was to be at the school. At one point, during a really tough week Avi took me aside and talked with me about what I was feeling. It was nice knowing that although we were adults and were meant to look for help if we needed it, the staff would still check in on us. He ended up giving me a lot of great advice and honestly it made me feel a lot better.</p>

<p>During the last month of the course we started our project mode. The first week was us working with assigned groups of three or four, we were expected to figure out a moderately simple idea for a Rails application and complete it within a week. If I heard that at the beginning of the semester I probably would have felt overwhelmed but my group was so great to work with it was very un-stressful. My group did a project called Pelicula Picker, a user-based survey that shows the most highly rated movies you would be interested in in theaters. We worked together on the entire application on a big monitor and it really helped us all walk through the process and see what needed to be done.</p>

<p>The next week was much more intense, we had to choose our group and create a much bigger application for the Science Fair the next week. My group of two other great female classmates created a custom dashboard for Flatiron using Github data and a Javascript visual board. As if that wasn’t already stressful another student and I were presenting our meet-up topic the following Tuesday. There was a lot to do and if I didn’t know that much programming by then I would have thought it was impossible. Tensions were high for staff and students, but it only lasted until the following week.</p>

<p>For some reason the Tuesday of my meet-up I was completely calm. I had always worried about public speaking but something about knowing the code in’s and out’s of our code made talking to a group of my peers not as terrifying as I thought it would be. It was a really fun experience going through the project and showing off our hard work. By the end of our talk I was more excited about the Science Fair in the next two days.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/sciencefair.png" width="90%"/></p>

<p>Talk about the calm before the storm; I don’t know about the rest of my class but the morning of our Science Fair was the calmest moment I experienced during the project mode weeks. Everyone’s project’s were finished and ready for presenting so there was little to do but relax, something that was really helpful prior to the Fair. At 3, we started getting situated at our tables within an hour we had our first companies coming in.</p>

<p>The school had 250 companies attend the fair, and some companies had two or three recruiters; it was a really intense and talk-filled three hours. Recruiters, employees, and programmers came and went and the questions ranged from technical topics to simple “what does this button do”. I found it really helpful to change up my list of projects every twenty minutes and keep my mind active. The three hours came and went quickly, it was surprising how talking constantly made the time fly. Although I didn’t stick around for the after-party with the students and staff I knew that we had all had a successful fair.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/flatirongraduation.png" width="90%"/></p>

<p>Last Friday, the 22nd, was our last day. Although I’m sad that the journey is over a new one is beginning and I’m terribly excited for it. I wish all the luck in the world to the Ruby 005, iOS 002, and Brooklyn 001 classes. It’s been a wonderful experience and we’re going to do amazingly. We’ve gotten through Flatiron, we can do anything!</p>

<p>And the best thing about programming is now I can understand the Programmer Ryan Gosling memes!
<img src="http://ChristinaLeuci.github.io/images/flatiron/ryan.png" width="90%"/> Keep on being badass!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrays of a Feather Flock Together]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/06/13/arrays-of-a-feather-flock-together/"/>
    <updated>2014-06-13T05:21:18-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/06/13/arrays-of-a-feather-flock-together</id>
    <content type="html"><![CDATA[<p>I have found that explaining programs (or trying to) has helped me greatly in understanding the use of syntax. So let me teach you about these little nuisances called Nested Arrays.</p>

<!--more-->


<p>Nested arrays were a big problem for me even in Java. I understood the concept that there was an array inside an array but the syntax and use never really connected. The NYC Pigeon Lab was pretty difficult for me. Taking one nested array and translating it into another was like climbing Mount Everest in under a minute.</p>

<p>The instructions for the NYC Pigeon Lab were define a method called nyc_pigeon_organizer and take in an array called pigeon_data. Take the names of the pigeon&rsquo;s first, a general attribute and the attribute specific to them. Easy in theory, hard in practice.</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">:color</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:purple</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Jr.&quot;</span><span class="p">,</span> <span class="s2">&quot;Lucky&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:grey</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Jr.&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:white</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Queenie&quot;</span><span class="p">,</span> <span class="s2">&quot;Andrew&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="p">,</span> <span class="s2">&quot;Alex&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:brown</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Queenie&quot;</span><span class="p">,</span> <span class="s2">&quot;Alex&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="ss">:gender</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:male</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Alex&quot;</span><span class="p">,</span> <span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Jr.&quot;</span><span class="p">,</span> <span class="s2">&quot;Andrew&quot;</span><span class="p">,</span> <span class="s2">&quot;Lucky&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:female</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Queenie&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="ss">:lives</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Subway&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Queenie&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Central Park&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Alex&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="p">,</span> <span class="s2">&quot;Lucky&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Library&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Peter Jr.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;City Hall&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Andrew&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pigeon Data is a nested array so to get to the names you need to go through :color, then through :purple, then take each index in the name_array and put that into another array while deleting any repeats. But wait? Doesn&rsquo;t gender only have one list of names? If I put those names into an array then I wouldn&rsquo;t have to delete any repeats.</p>

<p>Well I tried that. Yes, I did get an array of names without complications and there were no repetitions but where could I go from there? I was completely lost. I had gotten into the gender hash and completely by-passed all that other information. What could I do now?</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">nyc_pigeon_organizer</span><span class="p">(</span><span class="n">pigeon_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pigeon_list</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:gender</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">gender</span><span class="p">,</span> <span class="n">name_array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">pigeon_list</span><span class="o">[</span><span class="n">name_array</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">pigeon_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I ultimately scrapped that and started out with a new method. This time I decided to take the long, multi-step path. I retrospect going through the pigeon_data array as a whole helped me learn more than just trying to go through the :gender hash.</p>

<p>So my new method went through the entire pigeon_data array, first the attributes like :color and :gender, then through their descriptive attirbutes like :purple and :male. Finally I was at the names but it was obvious I would have somewhere around five of each name in my new organized_pigeon array.</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">nyc_pigeon_organizer</span><span class="p">(</span><span class="n">pigeon_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="p">,</span> <span class="n">att_description</span><span class="o">|</span>
</span><span class='line'>    <span class="n">att_description</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute_specific</span><span class="p">,</span> <span class="n">name_array</span><span class="o">|</span>
</span><span class='line'>      <span class="n">name_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">pigeon_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My first thought was to go through everything in an if loop and figure out if that name was already in the array or if it wasn&rsquo;t that I could add it. But I remembered, isn&rsquo;t there a way to see if there&rsquo;s already a hash in an array just like how you can see if the same string is in an array?</p>

<p>There is</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span>
</span><span class='line'>      <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>      <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>    <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go through the top parts of these if methods. In the first one I&rsquo;m asking that if the pigeon_list[name] is already in use if it&rsquo;s not I create a new hasg through the use of Hash.new. If the name is new then I begin to add the attribute hashes that are connected to that name. I specified attribute == :color because that was a larger nested array than :gender or :lives. So whatever the attribute may be the attribute_specific (ie. the :purple, :male, or &ldquo;Subway&rdquo;) is being changed into a string and added to that name-attribute array.</p>

<p>Very similarly the first if method is checking to see if that name is already a hash. If it is then it goes through the same process as the else that created a new hash.
This is the complete code:</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">nyc_pigeon_organizer</span><span class="p">(</span><span class="n">pigeon_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="p">,</span> <span class="n">att_description</span><span class="o">|</span>
</span><span class='line'>    <span class="n">att_description</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute_specific</span><span class="p">,</span> <span class="n">name_array</span><span class="o">|</span>
</span><span class='line'>      <span class="n">name_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span>
</span><span class='line'>            <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>              <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>              <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>            <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">pigeon_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I first checked out this lab and read through it I thought it was impossible. In retrospect is was moderately complicated but easier now that I&rsquo;ve gone through it and explained it to myself.</p>

<p>Keep on being badass!</p>
]]></content>
  </entry>
  
</feed>

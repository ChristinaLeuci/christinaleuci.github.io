<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Christina Leuci]]></title>
  <link href="http://ChristinaLeuci.github.io/atom.xml" rel="self"/>
  <link href="http://ChristinaLeuci.github.io/"/>
  <updated>2014-12-18T15:10:13-05:00</updated>
  <id>http://ChristinaLeuci.github.io/</id>
  <author>
    <name><![CDATA[Christina Leuci]]></name>
    <email><![CDATA[christinaleuci@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up an API on an Existing Rails Application]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/12/18/setting-up-an-api-on-an-existing-rails-application/"/>
    <updated>2014-12-18T12:48:34-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/12/18/setting-up-an-api-on-an-existing-rails-application</id>
    <content type="html"><![CDATA[<p>Hey y&#8217;all it&rsquo;s been a long time! Life has been a bit busy at the moment and I&rsquo;ll write a blog all about that in the non-technical session ASAP.</p>

<!--more-->


<p>Today I&rsquo;m going to talk about setting up your current Rails application with an API. This is assuming that you have a working Rails application, preferably with data to see in the browser when you have it up and running through the rails server.</p>

<h2>The Pre-Coding Code</h2>

<p>So before we do any serious setup the first thing we will need to do is access the rails-api gem. To do this put this line inside your Gemfile file</p>

<figure class='code'><figcaption><span>[Gemfile] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails-api' , require: 'rails-api/action_controller/api'</span></code></pre></td></tr></table></div></figure>


<p>and bundle install.</p>

<h2>Ain&rsquo;t No Basic Controller</h2>

<p>At this point you will have access to the API Action Controller which I suggest you read up on in the <a href="http://api.rubyonrails.org/">Ruby on Rails API docs</a>. So now that your application is ready for API goodness you&rsquo;ll want to create a sub-folder underneath your <span font-style="italics">app/controllers</span> titled <span style="font-weight: 500"> api </a>.</p>

<p>At this point underneath <span font-style="italics">app/controllers</span> you should have your main controllers, ie. application_controller or user_controller, and your <span font-style="italics">api</span> folder.</p>

<p>Now inside this api folder you will want to add an <span font-style="italics">api_controller.rb</span> file and an optional <span font-style="italics">v1</span> folder.</p>

<p>The <span font-style="italics">api_controller.rb</span> will be your API controller, this is essentially the application controller for your API. Inside your api_controller you will want to set it up similarly to the application_controller <figure class='code'><figcaption><span>[api_controller.rb] </span></figcaption></p>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">ApiController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div>


<p></figure></p>

<p>As you can see we are no longer using the Base Action Controller, instead we&rsquo;re using the API Action Controller. This will be one of the sub controllers that will inherit from the Base Action Controller. If in the future you want to implement an API sign in option with a username and secret as many api&rsquo;s have now-a-days this if the file you would do this in.</p>

<p>At this point you should have the <span font-style="italics">api_controller.rb</span> setup and hopefully, but not required, the <span font-style="italics">v1</span> folder setup.</p>

<p>I suggest implement the <span font-style="italics">v1</span> folder incase you decide to create multiple versions of the api in the future.</p>

<p>So let&rsquo;s say you have the <span font-style="italics">v1</span> setup. Inside this folder you will have all of the controllers you&rsquo;re find in the main controllers folder. Currently I am using an api user_controller to allow api users to access the users in the system.</p>

<h2>Get The Data You Want</h2>

<p>Inside the <span font-style="italics">user_controller.rb</span> you will want to set it up depending on which information you want to be shown. Let&rsquo;s say that your application user_controller has both index and show methods, this will mean your API user_controller will also have index and show methods.</p>

<figure class='code'><figcaption><span>[api/v1/user_controller.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">UserController</span> <span class="o">&lt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">ApiController</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">MimeResponds</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@users</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@user</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I have set it up so that when the api user goes to <span font-style="italics">example.com/api/v1/users.json</span> they will see all the users in the database. As you can see I put &ldquo;.json&rdquo; at the end of the html address, this is because inside the api user_controller I specified the format I want to respond to. I you wanted the api to respond to an xml call then you would put</p>

<figure class='code'><figcaption><span>[user_controller.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span><span class="n">render</span> <span class="ss">xml</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> or even allowing access to both json and xml calls</p>

<p> <figure class='code'><figcaption><span>[user_controller.rb] </span></figcaption></p>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>    <span class="k">if</span> <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span><span class="n">render</span> <span class="ss">json</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span><span class="n">render</span> <span class="ss">xml</span><span class="p">:</span><span class="vi">@user</span><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div>


<p></figure></p>

<p> I setup the user.show api call similarly. When an api user calls <span font-style="italics">example.com/api/v1/users/1.json</span> this will show that specific user&rsquo;s data.</p>

<h2>Almost Done</h2>

<p>Awesome, you&rsquo;re almost done. Just like any other controller you will need to set up the routes.</p>

<figure class='code'><figcaption><span>[config/routes.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">resources</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">resources</span> <span class="ss">:other_controllers</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to organize my api groups of controllers under a namespace and again under a v1 namespace. This allows me to organize my routes instead of searching for them through the document. Optionally I chose to make my <span font-style="italics">api/user_controller.rb</span> also a namespace. This requires me to access my other api controllers based on the user api controller.</p>

<p>And that&rsquo;s it! You have successfully implemented your application with Rails API. Any advice or concerns are appreciated! &lt;3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tictactoe in Ruby]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/11/03/tictactoe-in-ruby/"/>
    <updated>2014-11-03T14:20:03-05:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/11/03/tictactoe-in-ruby</id>
    <content type="html"><![CDATA[<p>This is a really quick Ruby tictactoe program that really feels like it&rsquo;s playing against you.</p>

<!--more-->


<p>I created this a couple of months ago so it may not be the most optimized it can be but it works which is the important thing. What you must first do is define the parameters of the board</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#all the different slots that you can play
</span><span class='line'>@slots = { 
</span><span class='line'>  "a1"=>" ","a2"=>" ","a3"=>" ",
</span><span class='line'>  "b1"=>" ","b2"=>" ","b3"=>" ",
</span><span class='line'>  "c1"=>" ","c2"=>" ","c3"=>" "
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#all 8 winning matches
</span><span class='line'>@winning = [ 
</span><span class='line'>  ['a1', 'a2', 'a3'],
</span><span class='line'>  ['b1', 'b2', 'b3'],
</span><span class='line'>  ['c1', 'c2', 'c3'],
</span><span class='line'>  ['a1', 'b1', 'c1'],
</span><span class='line'>  ['a2', 'b2', 'c2'],
</span><span class='line'>  ['a3', 'b3', 'c3'],
</span><span class='line'>  ['a1', 'b2', 'c3'],
</span><span class='line'>  ['c1', 'b2', 'a3']
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>The next thing you need to do is initialize the players, you and the computer. In the method below we define the computer&rsquo;s name as Computer and prints out the lines before taking in a user&rsquo;s name.</p>

<figure class='code'><figcaption><span>tictactoe.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># player names; introduction</span>
</span><span class='line'><span class="vi">@comp_name</span> <span class="o">=</span> <span class="s2">&quot;Computer&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;TIC TAC TOE&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Player, what is your name?&quot;</span>
</span><span class='line'><span class="no">STDOUT</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="vi">@player_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we must now decide is who&rsquo;s turn it will be. I decided to create some logic that randomnly selects who will go first.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># determine who is X or O
</span><span class='line'># use .5 because only 2 options [x or o]
</span><span class='line'>@comp = rand() > 0.5 ? 'X' : 'O'
</span><span class='line'>@player = @comp == 'X' ? 'O' : 'X'
</span><span class='line'>
</span><span class='line'>#actually initiating the methods
</span><span class='line'> if(@player == 'X')
</span><span class='line'>  puts ''
</span><span class='line'>  puts "#{@player_name} has the first turn"
</span><span class='line'>  player_turn
</span><span class='line'>else
</span><span class='line'>  puts ''
</span><span class='line'>  puts "#{@comp_name} has the first turn"
</span><span class='line'>  comp_turn
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>At this point we have defined the parameters of the game, who the players are, and who will go first. What we must do now is draw the game and figure out the logic that allows the computer to be a worthy opponent. Let&rsquo;s start with an easy method to draw the board.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#draw game method shows slots, empty and full
</span><span class='line'>def draw_game
</span><span class='line'>  puts "-----------------------------------------------------------------------------"
</span><span class='line'>
</span><span class='line'>  puts "TIC TAC TOE"
</span><span class='line'>  puts "#{@comp_name}: #{@comp}"
</span><span class='line'>  puts "#{@player_name}: #{@player}"
</span><span class='line'>  puts ""
</span><span class='line'>  puts "   a   b   c"
</span><span class='line'>  puts ""
</span><span class='line'>  puts " 1 #{@slots["a1"]} | #{@slots["b1"]} | #{@slots["c1"]}"
</span><span class='line'>  puts "   ---------"
</span><span class='line'>  puts " 2 #{@slots["a2"]} | #{@slots["b2"]} | #{@slots["c2"]}"
</span><span class='line'>  puts "   ---------"
</span><span class='line'>  puts " 3 #{@slots["a3"]} | #{@slots["b3"]} | #{@slots["c3"]}"
</span><span class='line'>  puts ""
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>What this will print out is a board that contains the slot names ie. &ldquo;a1&hellip;a2&rdquo; in their slots. At this point we can start dealing with the more complicated logic. Let&rsquo;s begin by starting with the two methods we defined earlier when we figured out which player would go first.</p>

<p>Let&rsquo;s walk through the player_turn method. It begins by drawing the game and then asks the player to make a move by typing in a slot. Inside the method we check if the slot the user inputted is legitimate. If it&rsquo;s not we call the wrong_move or wrong_input method&rsquo;s but we&rsquo;ll cover that in just a second.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def player_turn
</span><span class='line'>  puts ""
</span><span class='line'>  draw_game
</span><span class='line'>  puts "#{@player_name}, please make a move or type 'exit' to quit"
</span><span class='line'>  STDOUT.flush
</span><span class='line'>  input = gets.chomp.downcase
</span><span class='line'>  if input.length == 2
</span><span class='line'>    a = input.split("")
</span><span class='line'>    if(['a','b','c'].include? a[0])
</span><span class='line'>      if(['1','2','3'].include? a[1])
</span><span class='line'>        if @slots[input] == " "
</span><span class='line'>          @slots[input] = @player
</span><span class='line'>          puts ""
</span><span class='line'>          puts "#{@player_name} marks #{input.upcase}"
</span><span class='line'>      #puts times.times_in_column
</span><span class='line'>          check_game(@comp)
</span><span class='line'>        else
</span><span class='line'>          wrong_move
</span><span class='line'>        end
</span><span class='line'>      else
</span><span class='line'>        wrong_input
</span><span class='line'>      end
</span><span class='line'>    else
</span><span class='line'>      wrong_input
</span><span class='line'>    end
</span><span class='line'>  else
</span><span class='line'>    wrong_input unless input == 'exit'
</span><span class='line'>  end
</span><span class='line'> end</span></code></pre></td></tr></table></div></figure>


<p>The wrong_move and wrong_input methods are very simple. If the input the user gives is wrong then the program prints out that the player inputed the wrong string. It calls the player_turn method again for the player to pick another turn.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def wrong_move
</span><span class='line'>  puts ""
</span><span class='line'>  puts "You must choose an empty slot"
</span><span class='line'>  player_turn
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def wrong_input
</span><span class='line'>  puts ""
</span><span class='line'>  puts "Please specify a move with the format 'A3' , 'B1' , 'C2' etc."
</span><span class='line'>  player_turn
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>If we walk through the code at this point as a player we find ourselves at the check_game method. This is a main method in our program so let&rsquo;s take a break from the player path and delve more into the computer path so we can find ourselves again at the check_game method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def comp_turn
</span><span class='line'>  move = comp_find_move
</span><span class='line'>  @slots[move] = @comp
</span><span class='line'>  puts ""
</span><span class='line'>  puts "#{@comp_name} marks #{move.upcase}"
</span><span class='line'>  check_game(@player)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>The first method we encounter here is the comp_find_move method. This will decide the next move that the computer will take before we check the game for a winner or loser. Let&rsquo;s go over the comp_find_move method now to go over the logic involved in the computer finding it&rsquo;s next move.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def comp_find_move
</span><span class='line'>  #choosing best comp choice 2 in column
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @comp) == 2
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  #defending against the player first
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @player) == 2
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  #third best comp choice only one in column
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    if times_in_column(column, @comp) == 1
</span><span class='line'>      return empty_in_column column
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  #choosing an empty slot
</span><span class='line'>  k = @slots.keys;
</span><span class='line'>  j = rand(k.length)
</span><span class='line'>  if @slots[k[j]] == " "
</span><span class='line'>    return k[j]
</span><span class='line'>  else
</span><span class='line'>    #first empty slot
</span><span class='line'>    @slots.each { |k,m| return k if m == " " }
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This method figures out the best moves the computer can make to make sure it beats the player. The first if clause chooses a slot if the computer already has two slots in a line. The next if clause chooses a slot to defend against the player. The last if clause chooses a slot if the computer already has one slot in a row on the board. If all these if clauses have failed then the computer chooses an empty slot.</p>

<p>Let&rsquo;s go over the times_in_column and empty_in_column methods before we go over the check_game method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def times_in_column arr, item
</span><span class='line'>  times = 0
</span><span class='line'> #arr.each do |i|
</span><span class='line'> for i in [arr] do
</span><span class='line'>    if @slots[i] != " "
</span><span class='line'>    times += 1
</span><span class='line'>    unless @slots[i] == item || @slots[i] == " "
</span><span class='line'>      return 0
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  return times
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def empty_in_column arr
</span><span class='line'>  arr.each do |i|
</span><span class='line'>    if @slots[i] == " "
</span><span class='line'>      return i
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>These two methods are very simple. The times_in_column method count the slots that are in a column. So if there were three slots in a column it would return three. Similarly the empty_in_column method returns if there is an empty space in that column.</p>

<p>At this point we&rsquo;ve handled all the minor methods, we have one more method to go, the check_game method. This will essentially tell us if there is a winner, a tie, or if the game needs to continue.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#checking winnings or loses or continuings
</span><span class='line'>def check_game(next_turn)
</span><span class='line'>  game_over = false
</span><span class='line'>  #@winnings.each do |column|
</span><span class='line'>  for column in [@winnings] do
</span><span class='line'>    #comp has won?
</span><span class='line'>    if times_in_column(column, @comp) == 3 #three in a row
</span><span class='line'>    puts ""
</span><span class='line'>      puts "Game Over Dude, the Computer won!!!"
</span><span class='line'>      game_over = true
</span><span class='line'>    end
</span><span class='line'>  
</span><span class='line'>    #player has won?
</span><span class='line'>    if times_in_column(column, @player) == 3 #three in a row
</span><span class='line'>    puts ""
</span><span class='line'>      puts "Game Over YOU win!!!"
</span><span class='line'>      game_over = true
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  unless game_over
</span><span class='line'>    if(moves_left > 0) #no moves left
</span><span class='line'>      if(next_turn == @player) #from comp_turn method
</span><span class='line'>        player_turn
</span><span class='line'>      else
</span><span class='line'>        comp_turn #from player_turn method
</span><span class='line'>    end
</span><span class='line'>  
</span><span class='line'>    else
</span><span class='line'>      puts ""
</span><span class='line'>      puts "Game Over -- DRAW!"
</span><span class='line'>    game_over = true
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This method begins by setting a game_over value to false. In the first if loop we figure out if the computer has three slots in a row, if that&rsquo;s true the program outputs that the computer has won and the program stops. If the player has three slots in a row then the program outputs that the player has won and the program stops.</p>

<p>The final if statement checks to make sure that there are no more moves left. If there are more moves left then it figures out who has the next move. If there are no more moves left it outputs that the game has ended in a draw and the program stops.</p>

<p>If you haven&rsquo;t noticed we have one small problem, we still need to define the moves_left method. This last piece completes the program. This method goes through the board to see if there is another slot open for a move to be completed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def moves_left
</span><span class='line'>  slots = 0
</span><span class='line'>  @slots.each do |k, v|
</span><span class='line'>    slots += 1 if v == " "
</span><span class='line'>  end
</span><span class='line'>  slots
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Congratulations you&rsquo;ve completed a Ruby Tictactoe program! As with any good program there are always ways to optimize the code. Let me know what you think of the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Comments to a Octopress Blog]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/10/28/add-comments-to-your-blog/"/>
    <updated>2014-10-28T23:14:56-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/10/28/add-comments-to-your-blog</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to add comments to you github pages blog? It will take a quick two minutes and you&rsquo;ll be ready for feedback!</p>

<!--more-->


<p>Today we&rsquo;ll be using <a href="http://disqus.com">Disqus</a>, this is something that&rsquo;s already implemented in the current update of Octopress. The first thing you&rsquo;ll need to do is signup for a Disqus account. If you already have an account you can skip down to <span style="font-weight: 500">Step 2</span>.</p>

<h2>Step 1</h2>

<p>Once you&rsquo;ve signed up for your Disqus account go to the icon at the top right of your page. In the drop down menu click on the My Home button.</p>

<p><img src="http://ChristinaLeuci.github.io/images/disqus/start.png" width="90%"/></p>

<h2>Step 2</h2>

<p>At this point you will have come to your Disqus homepage, for your purposes of using Disqus as a comment feed you won&rsquo;t need the homepage much. If you go again to the top right of the screen and click on the gear it will show you another drop down menu. In this menu click on the Add Disqus to Site button.</p>

<p><img src="http://ChristinaLeuci.github.io/images/disqus/homemenu.png"/></p>

<h2>Step 3</h2>

<p>Fill out the form like so:
<img src="http://ChristinaLeuci.github.io/images/disqus/siteprofile.png" width="90%"/></p>

<p>Make sure that when you choose your Unique Disqus URL you are sure of it. So far Disqus has not given user&rsquo;s the option of changing it.</p>

<h2>Step 4</h2>

<p>At this point in the game you can actually start working with your blog&rsquo;s source code. If you&rsquo;re up to date with Octopress you should already have the call to the Disqus partial inside your <span style="font-weight: 500">_layouts/post.html</span> partial.</p>

<p>The only thing you will need to change is inside the _includes/disqus.html partial. On line 4 you will need to put your unique short name for the site. If you can&rsquo;t remember it go to the admin page of your Disqus account, choose the unique site, and select the <span style="font-weight: 500">Settings</span> tab.</p>

<figure class='code'><figcaption><span>[disqus.html] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="cm">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">disqus_shortname</span> <span class="o">=</span> <span class="s1">&#39;YOUR_SHORTNAME_HERE&#39;</span><span class="p">;</span> <span class="c1">// required: replace example with your forum shortname</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* * * DON&#39;T EDIT BELOW THIS LINE * * */</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;//&#39;</span> <span class="o">+</span> <span class="nx">disqus_shortname</span> <span class="o">+</span> <span class="s1">&#39;.disqus.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! When you deploy your Octopress blog there will now be a comment section at the end of your blog posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technical Interviews, Oh My!]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/09/22/technical-interviews/"/>
    <updated>2014-09-22T09:21:02-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/09/22/technical-interviews</id>
    <content type="html"><![CDATA[<p>&ldquo;Repeat, Clarify, make examples, pseudo-code, code, and finally run it&rdquo;&hellip;</p>

<!--more-->


<p>That is what my mentor, Max, from Stack Exchange has told me time and again to succeed in technical interviews. This is actually useful in any situation in life where you must prove your worth.</p>

<p>Many times an employer will give you a general question, check to see if a point falls inside a box. Now this may seem like a very simple question, just draw a box and see if the point falls inside those parameters; sadly it’s a little more complicated. One of the first things you should do is repeat the question to make sure you have haven’t missed anything. Many times you may mis-hear the employer and do something completely different than what you were expected to.
Clarify by checking to see if you’re taking in user data, and if you need to check to see if that data is correct. Another good question would be to check if “a point inside a box” means that the point falls on a box’s line or literally inside the lines. Lastly, another good question is if the box follows a simple x&amp;y graph. It’s really helpful to write down these tidbits of information. By clarifying with your interviewer you show that you’re not just a robot, you’re capable of finding the loopholes inside a problem before coding. Generally an employer is just trying to gage your intelligence and won’t make it too complicated but it’s still smart to ask these questions and not get caught clueless.
Once you’re positive of the question and what path you should follow, you should begin making examples. If we’re following the problem earlier of a point inside a box, one path you could take is drawing an x&amp;y graph with a box. A quick aside: if they are asking for user input, yes it would be simple for you to ask for each point of the box but would it be as simple for the user? NO.
In this situation the simplest group of inputs would be two diagonal points, for example let’s pick the bottom left and the top right points. This way you know the dimensions of the box by using basic math with the points.
Now that we have a diagram of the box and it’s points finished let’s move through the example. Let’s say we have the top right point as (8, 9), the bottom right point as (2, 1), and the singular point as (4,5). Your drawing should look like this:</p>

<p><img src="http://ChristinaLeuci.github.io/images/interview/box.jpg" width="90%"/></p>

<p>Now it’s obvious by your drawing that this point is inside the box, but your computer where you’ll be coding doesn’t know. What you’ll need to do is use simple math to see if this point (4,5) falls inside the dimensions of this rectangle.</p>

<figure class='code'><figcaption><span>[psuedocode.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Psuedo</span> <span class="no">Code</span>
</span><span class='line'>
</span><span class='line'><span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">top_right_x?</span>
</span><span class='line'><span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">top_right_y?</span>
</span><span class='line'><span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">bottom_right_x?</span>
</span><span class='line'><span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">bottom_right_y?</span>
</span><span class='line'>
</span><span class='line'><span class="no">Test</span> <span class="n">this</span> <span class="n">out</span> <span class="n">with</span> <span class="n">your</span> <span class="n">points!</span>
</span><span class='line'>
</span><span class='line'><span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'><span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">?</span> <span class="no">Yes</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="no">Congratulations</span> <span class="n">your</span> <span class="n">code</span> <span class="n">works</span> <span class="n">with</span> <span class="n">one</span> <span class="n">set</span> <span class="n">of</span> <span class="n">points</span><span class="o">.</span>
</span><span class='line'><span class="no">You</span> <span class="n">should</span> <span class="k">do</span> <span class="n">this</span> <span class="n">with</span> <span class="n">points</span> <span class="n">inside</span> <span class="n">the</span> <span class="n">box</span><span class="p">,</span> <span class="n">on</span> <span class="n">the</span> <span class="n">line</span><span class="p">,</span> <span class="ow">and</span> <span class="n">outside</span> <span class="n">of</span> <span class="n">the</span> <span class="n">box</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that you do solve the problem and that it gives the correct answer. What you need to do now is put it into code that can be used. If you’re using Ruby like me, then simply create a new class, that can be instantiated in your IRB and create a method that you can plug your data into.</p>

<figure class='code'><figcaption><span>[QuickInterviewProblem.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">QuickInterviewProblem</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inside?</span><span class="p">(</span><span class="n">top_right_x</span><span class="p">,</span> <span class="n">top_right_y</span><span class="p">,</span> <span class="n">bottom_left_x</span><span class="p">,</span> <span class="n">bottom_left_y</span><span class="p">,</span>
</span><span class='line'>    <span class="n">point_x</span><span class="p">,</span> <span class="n">point_y</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># let&#39;s say the user puts in (8, 9, 2, 1, 4, 5)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">top_right_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">top_right_y</span> <span class="o">&amp;&amp;</span> <span class="n">point_x</span> <span class="o">&gt;</span>
</span><span class='line'>      <span class="n">bottom_left_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&gt;</span> <span class="n">bottom_left_y</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you’re finished! Although the question may seem simple, there is a complicated process to it. At this point what you could do is, further optimize your code or run it to see if it works. If we were to optimize this could what we could do is take out the if statement. By doing something like this:</p>

<figure class='code'><figcaption><span>[QuickInterviewProblem.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">QuickInterviewProblem</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inside?</span><span class="p">(</span><span class="n">top_right_x</span><span class="p">,</span> <span class="n">top_right_y</span><span class="p">,</span> <span class="n">bottom_left_x</span><span class="p">,</span> <span class="n">bottom_left_y</span><span class="p">,</span>
</span><span class='line'>    <span class="n">point_x</span><span class="p">,</span> <span class="n">point_y</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#let&#39;s say the user puts in (8, 9, 2, 1, 4, 5)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">top_right_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">top_right_y</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">point_x</span> <span class="o">&gt;</span> <span class="n">bottom_left_x</span> <span class="o">&amp;&amp;</span> <span class="n">point_y</span> <span class="o">&gt;</span> <span class="n">bottom_left_y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>it shows that you can solve a simple problem while optimizing your code.
Remember to check your code. It’s impressive to interviewers if you can catch your mistakes before presenting your code. Now at this point, an interviewer will either tell you good job or they will ask if it works. If they ask you the latter the best thing you can say is “I think it does, let’s check”. This shows confidence and that you’re willing to show you’re work.
If for some crazy reason your code doesn’t work, don’t worry, continue working on it and perfect it. Just rinse and repeat, if you can understand why it’s not working then you interviewer will still be impressed.
Congratulations you’ve completed your interview! Good luck to anyone who is hoping to do a technical interview!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Unexpected Adventure: My Flatiron Experience]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/09/04/an-unexpected-adventure/"/>
    <updated>2014-09-04T14:16:55-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/09/04/an-unexpected-adventure</id>
    <content type="html"><![CDATA[<p>This past summer I attended The Flatiron School in New York City for their Ruby summer intensive course.</p>

<!--more-->


<p>It was a roller coaster of emotions and learning but I wouldn’t give up those memories for anything. Through tears and laughter I have made life-long friends, found a dazzling confidence I never knew I had, and of course learned a mountain of programming material.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/FlatironBeg.png" width="90%"/></p>

<p>My first serious taste of programming and computers started during my second year of college. I took an Intro to Computer Science course and although I fell in love with programming it left me voracious for the creative side of the subject. About halfway through that course I attended a Hackathon and I felt like a complete noob (thank god my group was so understanding) but it was so worth it, I learned that I could create anything I wanted through programming. When I took a break from college I dabbled into Code Academy and online resources but they never gave me that inspiration that I had found during that Hackathon.</p>

<p>The first time I found out about Flatiron I was skeptical; they had a 100% job-placement rate and offered so many benefits. Could it be that good? I started going to their weekly meet-ups at their Manhattan campus, which I recommend for anyone looking for some good technical information. I must have annoyed the current students with all my questions about the school and their experiences with teachers and projects, luckily they were really accepting and gracious about it. It was astounding how much students had created after only learning for a couple of weeks. They had nothing but positive things to say about the school and it was quite obvious that they weren’t blindly promoting the school. I felt completely certain in my decision to apply.</p>

<p>January was the big month that I applied. It took a couple of months to hear back from them and I was a little nervous about the response. I can remember opening that email from Adam in April, I was so nervous; when I saw that I had been approved for an interview with Adam and Avi I was ecstatic, but there was still so much to do. I had never been interviewed before and it was a new terrifying experience, but I had never wanted anything more so I signed up for the earliest interviewing time the following week.</p>

<p>The interview started with my talking with Adam about who I was and what I wanted to do with programming. I answered honestly and truly about what I wanted from the program and what I wanted to afterwards. There were a couple of questions, like where do you hope to end up after the program. I had no idea how to answer this and that seemed fine to Adam. After 15 minutes of interviewing with Adam I started interviewing with Avi, the teacher of the Ruby program, about the Ruby Tic Tac Toe program I sent in with my application. I completely knew my code and I felt comfortable answering the questions that Avi asked. There were a couple that tripped me up about where I could go with the program that I had never thought to do.</p>

<p>Within an hour I heard back from Adam that I had been accepted for the summer course. And so I started a new chapter of my life.</p>

<p>The first week of Flatiron was a soft introduction into what we would be doing and what we could expect from the course. I had completed the pre-work from the course but things were still new to me and I felt a little lost. That seemed to be a common thought among the class.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/FlatironStudents.png" width="90%"/></p>

<p>The second week started picking up and from there we were in full-coursework mode. There were times I didn’t think I could keep up or that I just couldn’t get a topic. It was really helpful for me that our class had a Feeling’s Friday. Those sessions really helped me get a notion of what everyone else was thinking and just how grateful I was to be at the school. At one point, during a really tough week Avi took me aside and talked with me about what I was feeling. It was nice knowing that although we were adults and were meant to look for help if we needed it, the staff would still check in on us. He ended up giving me a lot of great advice and honestly it made me feel a lot better.</p>

<p>During the last month of the course we started our project mode. The first week was us working with assigned groups of three or four, we were expected to figure out a moderately simple idea for a Rails application and complete it within a week. If I heard that at the beginning of the semester I probably would have felt overwhelmed but my group was so great to work with it was very un-stressful. My group did a project called Pelicula Picker, a user-based survey that shows the most highly rated movies you would be interested in in theaters. We worked together on the entire application on a big monitor and it really helped us all walk through the process and see what needed to be done.</p>

<p>The next week was much more intense, we had to choose our group and create a much bigger application for the Science Fair the next week. My group of two other great female classmates created a custom dashboard for Flatiron using Github data and a Javascript visual board. As if that wasn’t already stressful another student and I were presenting our meet-up topic the following Tuesday. There was a lot to do and if I didn’t know that much programming by then I would have thought it was impossible. Tensions were high for staff and students, but it only lasted until the following week.</p>

<p>For some reason the Tuesday of my meet-up I was completely calm. I had always worried about public speaking but something about knowing the code in’s and out’s of our code made talking to a group of my peers not as terrifying as I thought it would be. It was a really fun experience going through the project and showing off our hard work. By the end of our talk I was more excited about the Science Fair in the next two days.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/sciencefair.png" width="90%"/></p>

<p>Talk about the calm before the storm; I don’t know about the rest of my class but the morning of our Science Fair was the calmest moment I experienced during the project mode weeks. Everyone’s project’s were finished and ready for presenting so there was little to do but relax, something that was really helpful prior to the Fair. At 3, we started getting situated at our tables within an hour we had our first companies coming in.</p>

<p>The school had 250 companies attend the fair, and some companies had two or three recruiters; it was a really intense and talk-filled three hours. Recruiters, employees, and programmers came and went and the questions ranged from technical topics to simple “what does this button do”. I found it really helpful to change up my list of projects every twenty minutes and keep my mind active. The three hours came and went quickly, it was surprising how talking constantly made the time fly. Although I didn’t stick around for the after-party with the students and staff I knew that we had all had a successful fair.</p>

<p><img src="http://ChristinaLeuci.github.io/images/flatiron/flatirongraduation.png" width="90%"/></p>

<p>Last Friday, the 22nd, was our last day. Although I’m sad that the journey is over a new one is beginning and I’m terribly excited for it. I wish all the luck in the world to the Ruby 005, iOS 002, and Brooklyn 001 classes. It’s been a wonderful experience and we’re going to do amazingly. We’ve gotten through Flatiron, we can do anything!</p>

<p>And the best thing about programming is now I can understand the Programmer Ryan Gosling memes!
<img src="http://ChristinaLeuci.github.io/images/flatiron/ryan.png" width="90%"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrays of a Feather Flock Together]]></title>
    <link href="http://ChristinaLeuci.github.io/blog/2014/06/13/arrays-of-a-feather-flock-together/"/>
    <updated>2014-06-13T05:21:18-04:00</updated>
    <id>http://ChristinaLeuci.github.io/blog/2014/06/13/arrays-of-a-feather-flock-together</id>
    <content type="html"><![CDATA[<p>I have found that explaining programs (or trying to) has helped me greatly in understanding the use of syntax. So let me teach you about these little nuisances called Nested Arrays.</p>

<!--more-->


<p>Nested arrays were a big problem for me even in Java. I understood the concept that there was an array inside an array but the syntax and use never really connected. The NYC Pigeon Lab was pretty difficult for me. Taking one nested array and translating it into another was like climbing Mount Everest in under a minute.</p>

<p>The instructions for the NYC Pigeon Lab were define a method called nyc_pigeon_organizer and take in an array called pigeon_data. Take the names of the pigeon&rsquo;s first, a general attribute and the attribute specific to them. Easy in theory, hard in practice.</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">:color</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:purple</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Jr.&quot;</span><span class="p">,</span> <span class="s2">&quot;Lucky&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:grey</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Jr.&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:white</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Queenie&quot;</span><span class="p">,</span> <span class="s2">&quot;Andrew&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="p">,</span> <span class="s2">&quot;Alex&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:brown</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Queenie&quot;</span><span class="p">,</span> <span class="s2">&quot;Alex&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="ss">:gender</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:male</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Alex&quot;</span><span class="p">,</span> <span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Jr.&quot;</span><span class="p">,</span> <span class="s2">&quot;Andrew&quot;</span><span class="p">,</span> <span class="s2">&quot;Lucky&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:female</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Queenie&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="ss">:lives</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Subway&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Theo&quot;</span><span class="p">,</span> <span class="s2">&quot;Queenie&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Central Park&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Alex&quot;</span><span class="p">,</span> <span class="s2">&quot;Ms .K&quot;</span><span class="p">,</span> <span class="s2">&quot;Lucky&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Library&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Peter Jr.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;City Hall&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Andrew&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pigeon Data is a nested array so to get to the names you need to go through :color, then through :purple, then take each index in the name_array and put that into another array while deleting any repeats. But wait? Doesn&rsquo;t gender only have one list of names? If I put those names into an array then I wouldn&rsquo;t have to delete any repeats.</p>

<p>Well I tried that. Yes, I did get an array of names without complications and there were no repetitions but where could I go from there? I was completely lost. I had gotten into the gender hash and completely by-passed all that other information. What could I do now?</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">nyc_pigeon_organizer</span><span class="p">(</span><span class="n">pigeon_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pigeon_list</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:gender</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">gender</span><span class="p">,</span> <span class="n">name_array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">pigeon_list</span><span class="o">[</span><span class="n">name_array</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">pigeon_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I ultimately scrapped that and started out with a new method. This time I decided to take the long, multi-step path. I retrospect going through the pigeon_data array as a whole helped me learn more than just trying to go through the :gender hash.</p>

<p>So my new method went through the entire pigeon_data array, first the attributes like :color and :gender, then through their descriptive attirbutes like :purple and :male. Finally I was at the names but it was obvious I would have somewhere around five of each name in my new organized_pigeon array.</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">nyc_pigeon_organizer</span><span class="p">(</span><span class="n">pigeon_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="p">,</span> <span class="n">att_description</span><span class="o">|</span>
</span><span class='line'>    <span class="n">att_description</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute_specific</span><span class="p">,</span> <span class="n">name_array</span><span class="o">|</span>
</span><span class='line'>      <span class="n">name_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">pigeon_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My first thought was to go through everything in an if loop and figure out if that name was already in the array or if it wasn&rsquo;t that I could add it. But I remembered, isn&rsquo;t there a way to see if there&rsquo;s already a hash in an array just like how you can see if the same string is in an array?</p>

<p>There is</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span>
</span><span class='line'>      <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>      <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>    <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go through the top parts of these if methods. In the first one I&rsquo;m asking that if the pigeon_list[name] is already in use if it&rsquo;s not I create a new hasg through the use of Hash.new. If the name is new then I begin to add the attribute hashes that are connected to that name. I specified attribute == :color because that was a larger nested array than :gender or :lives. So whatever the attribute may be the attribute_specific (ie. the :purple, :male, or &ldquo;Subway&rdquo;) is being changed into a string and added to that name-attribute array.</p>

<p>Very similarly the first if method is checking to see if that name is already a hash. If it is then it goes through the same process as the else that created a new hash.
This is the complete code:</p>

<figure class='code'><figcaption><span>[nyc_pigeon_organizer.rb]</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">nyc_pigeon_organizer</span><span class="p">(</span><span class="n">pigeon_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="p">,</span> <span class="n">att_description</span><span class="o">|</span>
</span><span class='line'>    <span class="n">att_description</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute_specific</span><span class="p">,</span> <span class="n">name_array</span><span class="o">|</span>
</span><span class='line'>      <span class="n">name_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span>
</span><span class='line'>            <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>              <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>              <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">attribute</span> <span class="o">==</span> <span class="ss">:color</span>
</span><span class='line'>            <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="n">attribute_specific</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">pigeon_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I first checked out this lab and read through it I thought it was impossible. In retrospect is was moderately complicated but easier now that I&rsquo;ve gone through it and explained it to myself.</p>

<p>So if you ever find yourself walking past me and you hear me talking to myself while staring at my computer just know I&rsquo;m not crazy, I&rsquo;m just trying to figure out this code :]</p>
]]></content>
  </entry>
  
</feed>
